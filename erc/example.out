Programm
    FunctionDecl: "main" (void)
        ParameterList
        StatementList
            FunctionCall: "strings"
    EnumDecl: "TestType"
        EnumElement: "None" (0)
        EnumElement: "Some" (1)
        EnumElement: "Never" (7)
        EnumElement: "Ultimate" (8)
    EnumDecl: "TestType2"
        EnumElement: "Some" (0)
        EnumElement: "Ding" (1)
    FunctionDecl: "strings" (void)
        ParameterList
        StatementList
            VarDecl: "s" (array[char8])
                NewStackArray
                    ValueArrayDefinition: (array[char8])
                        Immediate: 'T' (char8)
                        Immediate: 'e' (char8)
                        Immediate: 's' (char8)
                        Immediate: 't' (char8)
                        Immediate: '\0' (char8)
            VarDecl: "h" (array[char8])
                NewHeapArray
                    ValueArrayDefinition: (array[char8])
                        Immediate: 'H' (char8)
                        Immediate: 'e' (char8)
                        Immediate: 'l' (char8)
                        Immediate: 'l' (char8)
                        Immediate: 'o' (char8)
                        Immediate: ' ' (char8)
                        Immediate: 'W' (char8)
                        Immediate: 'o' (char8)
                        Immediate: 'r' (char8)
                        Immediate: 'l' (char8)
                        Immediate: 'd' (char8)
                        Immediate: '!' (char8)
                        Immediate: ' ' (char8)
                        Immediate: 'V' (char8)
                        Immediate: 'a' (char8)
                        Immediate: 'l' (char8)
                        Immediate: 'u' (char8)
                        Immediate: 'e' (char8)
                        Immediate: ' ' (char8)
                        Immediate: '%' (char8)
                        Immediate: 'u' (char8)
                        Immediate: '!' (char8)
                        Immediate: '\0' (char8)
            FunctionCall: "printf"
                Expression
                    Variable: "h" (array[char8])
                    UnaryOperator: &
                Immediate: 350 (i64)
            DelPointer
    FunctionDecl: "arrays" (void)
        ParameterList
        StatementList
            VarDecl: "k" (i64)
                Immediate: 5 (i64)
            VarDecl: "a" (array[i64])
                NewStackArray
                    ValueArrayDefinition: (array[i64])
                        Immediate: 1 (i64)
                        Immediate: 2 (i64)
                        Immediate: 3 (i64)
                        Expression
                            Variable: "k" (i64)
                            Immediate: 1 (i64)
                            BinaryOperator: +
            VarDecl: "b" (array[char8])
                NewStackArray
                    ValueArrayDefinition: (array[char8])
                        Immediate: 'H' (char8)
                        Immediate: 'e' (char8)
                        Immediate: 'l' (char8)
                        Immediate: 'l' (char8)
                        Immediate: 'o' (char8)
            VarDecl: "c" (array[i64])
                NewStackArray
                    SizedArrayDefinition: (array[i64])
                        Immediate: 66 (i64)
                        Immediate: 8 (u64)
            VarDecl: "x" (i64)
                IndexAccess: "a" (i64)
                    Immediate: 0 (i64)
            VarDecl: "y" (char8)
                IndexAccess: "b" (char8)
                    Immediate: 2 (i64)
            VarDecl: "z" (i64)
                IndexAccess: "c" (i64)
                    Immediate: 6 (i64)
            Assignment
                IndexAccess: "c" (i64)
                    Immediate: 6 (i64)
                Variable: "k" (i64)
            VarDecl: "l" (u64)
                Expression
                    Variable: "c" (array[i64])
                    UnaryOperator: #
            VarDecl: "r" (array[i64])
                NewHeapArray
                    ValueArrayDefinition: (array[i64])
                        Immediate: 1 (i64)
                        Immediate: 2 (i64)
                        Immediate: 3 (i64)
                        Immediate: 4 (i64)
            VarDecl: "s" (array[i64])
                NewHeapArray
                    SizedArrayDefinition: (array[i64])
                        Immediate: 7 (i64)
                        Immediate: 10 (u64)
            DelPointer
            DelPointer
    FunctionDecl: "chars" (void)
        ParameterList
        StatementList
            VarDecl: "c" (char8)
                Immediate: 'e' (char8)
            VarDecl: "s" (char8)
                Expression
                    Variable: "c" (char8)
                    Immediate: 'a' (char8)
                    BinaryOperator: -
            VarDecl: "a" (u8)
                Immediate: 65 (u8)
            VarDecl: "x" (char8)
                Expression
                    Variable: "a" (u8)
                    Type: (char8)
                    BinaryOperator: as
            VarDecl: "y1" (u8)
                Expression
                    Variable: "c" (char8)
                    Type: (u8)
                    BinaryOperator: as
            VarDecl: "y2" (u16)
                Expression
                    Variable: "c" (char8)
                    Type: (u16)
                    BinaryOperator: as
            VarDecl: "y3" (u32)
                Expression
                    Variable: "c" (char8)
                    Type: (u32)
                    BinaryOperator: as
            VarDecl: "y4" (u64)
                Expression
                    Variable: "c" (char8)
                    Type: (u64)
                    BinaryOperator: as
    FunctionDecl: "loops" (void)
        ParameterList
        StatementList
            For
                Immediate: 0 (i64)
                Immediate: 5 (i64)
                Immediate: 1 (i64)
                StatementList
                    VarDecl: "x" (i64)
                        Expression
                            Variable: "i" (i64)
                            Immediate: 1 (i64)
                            BinaryOperator: +
                    If
                        Expression
                            Variable: "x" (i64)
                            Immediate: 2 (i64)
                            BinaryOperator: >
                        StatementList
                            Break
            VarDecl: "a" (i64)
                Immediate: 5 (i64)
            While
                Expression
                    Variable: "a" (i64)
                    Immediate: 0 (i64)
                    BinaryOperator: >
                StatementList
                    Assignment
                        Variable: "a" (i64)
                        Expression
                            Variable: "a" (i64)
                            Immediate: 1 (i64)
                            BinaryOperator: -
                    Break
    FunctionDecl: "enums" (void)
        ParameterList
        StatementList
            VarDecl: "test" (TestType)
                Expression
                    Immediate: 1 (u32)
            Assignment
                Variable: "test" (TestType)
                Expression
                    Immediate: 7 (u32)
            VarDecl: "same" (bool)
                Expression
                    Immediate: 0 (u32)
                    Immediate: 1 (u32)
                    BinaryOperator: ==
    FunctionDecl: "expressions" (void)
        ParameterList
        StatementList
            VarDecl: "a" (i64)
                Expression
                    Immediate: 1 (i64)
                    Immediate: 2 (i64)
                    BinaryOperator: +
            Assignment
                Variable: "a" (i64)
                Expression
                    Immediate: 3 (i64)
                    UnaryOperator: -
                    Immediate: 6 (i64)
                    UnaryOperator: -
                    BinaryOperator: *
                    UnaryOperator: -
    FunctionDecl: "pointers" (void)
        ParameterList
        StatementList
            VarDecl: "p" (i64*)
                NewRawPointer: (i64*)
                    Immediate: 5 (u64)
            Assignment
                PointerDeref: "p" (i64)
                Immediate: 5 (i64)
            Assignment
                IndexAccess: "p" (i64)
                    Immediate: 2 (i64)
                Immediate: 8 (i64)
            VarDecl: "x" (i64)
                Expression
                    IndexAccess: "p" (i64)
                        Immediate: 0 (i64)
                    Immediate: 7 (i64)
                    BinaryOperator: +
            VarDecl: "y" (i64)
                Expression
                    Variable: "p" (i64*)
                    UnaryOperator: *
                    Immediate: 3 (i64)
                    BinaryOperator: +
            VarDecl: "z" (i64*)
                Expression
                    Variable: "x" (i64)
                    UnaryOperator: &
            Assignment
                Variable: "z" (i64*)
                Expression
                    IndexAccess: "p" (i64)
                        Immediate: 1 (i64)
                    UnaryOperator: &
            Assignment
                PointerDeref: "z" (i64)
                Immediate: 3 (i64)
            Assignment
                IndexAccess: "z" (i64)
                    Immediate: 1 (i64)
                Immediate: 9 (i64)
            VarDecl: "k" (i32*)
                Expression
                    Variable: "y" (i64)
                    Type: (i32)
                    BinaryOperator: as
                    UnaryOperator: &
            DelPointer
    FunctionDecl: "boolean" (void)
        ParameterList
            Parameter: "p1" (bool)
        StatementList
            VarDecl: "test" (bool)
                Expression
                    Immediate: 5 (i64)
                    Immediate: 3 (i64)
                    BinaryOperator: >=
            Assignment
                Variable: "test" (bool)
                Expression
                    Variable: "test" (bool)
                    Immediate: True (bool)
                    BinaryOperator: &&
                    Variable: "test" (bool)
                    BinaryOperator: ||
            Assignment
                Variable: "test" (bool)
                Expression
                    Variable: "test" (bool)
                    UnaryOperator: !
            VarDecl: "g" (i64)
                Immediate: 5 (i64)
            If
                Expression
                    Immediate: 1 (i64)
                    Immediate: 2 (i64)
                    BinaryOperator: <=
                StatementList
                    Assignment
                        Variable: "g" (i64)
                        Immediate: 2 (i64)
                    VarDecl: "j" (f32)
                        Immediate: 1.0 (f32)
                StatementList
                    Assignment
                        Variable: "g" (i64)
                        Immediate: 7 (i64)
            VarDecl: "x" (bool)
                Expression
                    Immediate: 5 (i64)
                    Immediate: 3 (i64)
                    Immediate: 2 (i64)
                    BinaryOperator: +
                    BinaryOperator: >
            VarDecl: "v1" (vec4f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            VarDecl: "v2" (vec4f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            If
                Expression
                    Variable: "v1" (vec4f)
                    Variable: "v2" (vec4f)
                    BinaryOperator: !=
                StatementList
                    Return
    ExternFunctionDecl: "last_error" (i64) ["GetLastError"; "Kernel32.dll"]
        ParameterList
    FunctionDecl: "fn_calls" (void)
        ParameterList
        StatementList
            VarDecl: "err_code" (i64)
                FunctionCall: "last_error"
            If
                Expression
                    Variable: "err_code" (i64)
                    Immediate: 0 (i64)
                    BinaryOperator: ==
                StatementList
                    Return
            VarDecl: "kx" (i64)
                Expression
                    Immediate: 5 (i64)
                    Immediate: 7 (i64)
                    Immediate: 3 (i64)
                    BinaryOperator: +
                    BinaryOperator: *
            VarDecl: "x6" (vec4d)
                Vector
                    Immediate: 1.0 (f64)
                    Immediate: 2.0 (f64)
                    Immediate: 3.0 (f64)
                    Immediate: 4.0 (f64)
            VarDecl: "k2" (vec4d)
                Expression
                    FunctionCall: "add"
                        Variable: "x6" (vec4d)
                        Variable: "x6" (vec4d)
                    FunctionCall: "add"
                        Variable: "x6" (vec4d)
                        Variable: "x6" (vec4d)
                    BinaryOperator: +
    FunctionDecl: "add" (vec4d)
        ParameterList
            Parameter: "pa" (vec4d)
            Parameter: "pb" (vec4d)
        StatementList
            Return
                Expression
                    Variable: "pa" (vec4d)
                    Variable: "pb" (vec4d)
                    Variable: "pa" (vec4d)
                    BinaryOperator: *
                    BinaryOperator: +
    FunctionDecl: "add2" (i8)
        ParameterList
            Parameter: "pa" (i8)
            Parameter: "pb" (i8)
        StatementList
            VarDecl: "r" (i8)
                Expression
                    Variable: "pa" (i8)
                    Variable: "pb" (i8)
                    Variable: "pa" (i8)
                    BinaryOperator: *
                    BinaryOperator: +
            Return
                Variable: "r" (i8)
    FunctionDecl: "add3" (u16)
        ParameterList
            Parameter: "pa" (u16)
            Parameter: "pb" (u16)
        StatementList
            Return
                Expression
                    Variable: "pa" (u16)
                    Variable: "pb" (u16)
                    Variable: "pa" (u16)
                    BinaryOperator: *
                    BinaryOperator: +
    FunctionDecl: "types" (void)
        ParameterList
        StatementList
            VarDecl: "a" (i64)
                Expression
                    Immediate: 5 (i64)
                    Immediate: 6 (i64)
                    BinaryOperator: *
                    Immediate: 7 (i64)
                    Immediate: 8 (i64)
                    BinaryOperator: *
                    BinaryOperator: +
            VarDecl: "b" (f32)
                Immediate: 1.5 (f32)
            VarDecl: "c" (f32)
                Variable: "b" (f32)
            VarDecl: "d" (f64)
                Immediate: 1.2 (f64)
            VarDecl: "e" (f64)
                Immediate: 0.5 (f64)
            VarDecl: "k" (f64)
                Expression
                    Variable: "e" (f64)
                    Variable: "d" (f64)
                    BinaryOperator: *
            Assignment
                Variable: "k" (f64)
                Expression
                    Variable: "k" (f64)
                    Immediate: 2.0 (f64)
                    BinaryOperator: +
            VarDecl: "x3" (vec4f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            VarDecl: "x4" (vec8f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            VarDecl: "x5" (vec2d)
                Vector
                    Immediate: 1.0 (f64)
                    Immediate: 2.0 (f64)
            VarDecl: "x6" (vec4d)
                Vector
                    Immediate: 1.0 (f64)
                    Immediate: 2.0 (f64)
                    Immediate: 3.0 (f64)
                    Immediate: 4.0 (f64)
            VarDecl: "y" (vec2d)
                Expression
                    Variable: "x5" (vec2d)
                    Variable: "x5" (vec2d)
                    BinaryOperator: +
            VarDecl: "abc" (vec4d)
                Vector
                    Immediate: 1.0 (f64)
                    Expression
                        Variable: "d" (f64)
                        Immediate: 2.0 (f64)
                        BinaryOperator: *
                    Expression
                        Immediate: 2.0 (f64)
                        Variable: "d" (f64)
                        BinaryOperator: *
                        Immediate: 3.0 (f64)
                        BinaryOperator: +
                    Expression
                        Variable: "d" (f64)
                        Immediate: 4.0 (f64)
                        BinaryOperator: /
            VarDecl: "xyz" (vec2d)
                Expression
                    Vector
                        Variable: "d" (f64)
                        Variable: "e" (f64)
                    Vector
                        Variable: "e" (f64)
                        Variable: "d" (f64)
                    BinaryOperator: +
            VarDecl: "ta" (i8)
                Immediate: 5 (i8)
            VarDecl: "tb" (i16)
                Immediate: 5 (i16)
            VarDecl: "tc" (i32)
                Immediate: 5 (i32)
            VarDecl: "ts" (i64)
                Immediate: 5 (i64)
            VarDecl: "te" (i64)
                Immediate: 5 (i64)
            VarDecl: "ua" (u8)
                Immediate: 5 (u8)
            VarDecl: "ub" (u16)
                Immediate: 5 (u16)
            VarDecl: "uc" (u32)
                Immediate: 5 (u32)
            VarDecl: "us" (u64)
                Immediate: 5 (u64)
            VarDecl: "ue" (u64)
                Immediate: 5 (u64)
    FunctionDecl: "empty" (void)
        ParameterList
        StatementList
    FunctionDecl: "type_casting_int" (void)
        ParameterList
        StatementList
            VarDecl: "x" (i32)
                Expression
                    Immediate: 5 (i64)
                    Type: (i32)
                    BinaryOperator: as
            VarDecl: "y1" (i64)
                Expression
                    Variable: "x" (i32)
                    Type: (i64)
                    BinaryOperator: as
            VarDecl: "y2" (i32)
                Expression
                    Variable: "x" (i32)
                    Type: (i32)
                    BinaryOperator: as
            VarDecl: "y3" (i16)
                Expression
                    Variable: "x" (i32)
                    Type: (i16)
                    BinaryOperator: as
            VarDecl: "y4" (i8)
                Expression
                    Variable: "x" (i32)
                    Type: (i8)
                    BinaryOperator: as
            VarDecl: "y5" (u64)
                Expression
                    Variable: "x" (i32)
                    Type: (u64)
                    BinaryOperator: as
            VarDecl: "y6" (u32)
                Expression
                    Variable: "x" (i32)
                    Type: (u32)
                    BinaryOperator: as
            VarDecl: "y7" (u16)
                Expression
                    Variable: "x" (i32)
                    Type: (u16)
                    BinaryOperator: as
            VarDecl: "y8" (u8)
                Expression
                    Variable: "x" (i32)
                    Type: (u8)
                    BinaryOperator: as
            VarDecl: "z1" (f32)
                Expression
                    Variable: "y3" (i16)
                    Type: (f32)
                    BinaryOperator: as
            VarDecl: "z2" (f64)
                Expression
                    Variable: "y3" (i16)
                    Type: (f64)
                    BinaryOperator: as
            VarDecl: "z3" (f32)
                Expression
                    Variable: "y6" (u32)
                    Type: (f32)
                    BinaryOperator: as
            VarDecl: "z4" (f64)
                Expression
                    Variable: "y6" (u32)
                    Type: (f64)
                    BinaryOperator: as
            VarDecl: "z5" (f32)
                Expression
                    Variable: "y5" (u64)
                    Type: (f32)
                    BinaryOperator: as
    FunctionDecl: "type_casting_float" (void)
        ParameterList
        StatementList
            VarDecl: "v4f" (vec4f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            VarDecl: "v1" (vec4f)
                Expression
                    Variable: "v4f" (vec4f)
                    Type: (vec4f)
                    BinaryOperator: as
            VarDecl: "v2" (vec8f)
                Expression
                    Variable: "v4f" (vec4f)
                    Type: (vec8f)
                    BinaryOperator: as
            VarDecl: "v3" (vec2d)
                Expression
                    Variable: "v4f" (vec4f)
                    Type: (vec2d)
                    BinaryOperator: as
            VarDecl: "v4" (vec4d)
                Expression
                    Variable: "v4f" (vec4f)
                    Type: (vec4d)
                    BinaryOperator: as
            VarDecl: "v8f" (vec8f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
                    Immediate: 5.0 (f32)
                    Immediate: 6.0 (f32)
                    Immediate: 7.0 (f32)
                    Immediate: 8.0 (f32)
            VarDecl: "v5" (vec4f)
                Expression
                    Variable: "v8f" (vec8f)
                    Type: (vec4f)
                    BinaryOperator: as
            VarDecl: "v6" (vec8f)
                Expression
                    Variable: "v8f" (vec8f)
                    Type: (vec8f)
                    BinaryOperator: as
            VarDecl: "v7" (vec2d)
                Expression
                    Variable: "v8f" (vec8f)
                    Type: (vec2d)
                    BinaryOperator: as
            VarDecl: "v8" (vec4d)
                Expression
                    Variable: "v8f" (vec8f)
                    Type: (vec4d)
                    BinaryOperator: as
            VarDecl: "v2d" (vec2d)
                Vector
                    Immediate: 1.0 (f64)
                    Immediate: 2.0 (f64)
            VarDecl: "vd1" (vec4f)
                Expression
                    Variable: "v2d" (vec2d)
                    Type: (vec4f)
                    BinaryOperator: as
            VarDecl: "vd2" (vec8f)
                Expression
                    Variable: "v2d" (vec2d)
                    Type: (vec8f)
                    BinaryOperator: as
            VarDecl: "vd3" (vec2d)
                Expression
                    Variable: "v2d" (vec2d)
                    Type: (vec2d)
                    BinaryOperator: as
            VarDecl: "vd4" (vec4d)
                Expression
                    Variable: "v2d" (vec2d)
                    Type: (vec4d)
                    BinaryOperator: as
            VarDecl: "v4d" (vec4d)
                Vector
                    Immediate: 1.0 (f64)
                    Immediate: 2.0 (f64)
                    Immediate: 3.0 (f64)
                    Immediate: 4.0 (f64)
            VarDecl: "vd5" (vec4f)
                Expression
                    Variable: "v4d" (vec4d)
                    Type: (vec4f)
                    BinaryOperator: as
            VarDecl: "vd6" (vec8f)
                Expression
                    Variable: "v4d" (vec4d)
                    Type: (vec8f)
                    BinaryOperator: as
            VarDecl: "vd7" (vec2d)
                Expression
                    Variable: "v4d" (vec4d)
                    Type: (vec2d)
                    BinaryOperator: as
            VarDecl: "vd8" (vec4d)
                Expression
                    Variable: "v4d" (vec4d)
                    Type: (vec4d)
                    BinaryOperator: as
            VarDecl: "pv" (vec4f*)
                NewRawPointer: (vec4f*)
                    Immediate: 1 (u64)
            VarDecl: "pv1" (vec4d)
                Expression
                    Variable: "pv" (vec4f*)
                    UnaryOperator: *
                    Type: (vec4d)
                    BinaryOperator: as
    ExternFunctionDecl: "erc_exit_process" (void) ["ExitProcess"; "Kernel32.dll"]
        ParameterList
            Parameter: "exit_code" (u32)
    ExternFunctionDecl: "erc_get_process_heap" (void*) ["GetProcessHeap"; "Kernel32.dll"]
        ParameterList
    ExternFunctionDecl: "erc_heap_alloc" (void*) ["HeapAlloc"; "Kernel32.dll"]
        ParameterList
            Parameter: "heap" (void*)
            Parameter: "flags" (u32)
            Parameter: "bytes" (u64)
    ExternFunctionDecl: "erc_heap_free" (bool) ["HeapFree"; "Kernel32.dll"]
        ParameterList
            Parameter: "heap" (void*)
            Parameter: "flags" (u32)
            Parameter: "mem" (void*)
    ExternFunctionDecl: "printf" (i32) ["printf"; "MSVCRT.DLL"]
        ParameterList
            Parameter: "format" (char8*)
            Parameter: "arguments" (vars)



[stack: 0, heap: 0]
[
]
fn main(): void
{
    CALL 'strings', 
    RET @void
}

[stack: 16, heap: 0]
[
  %s	: register(RBX),
  mem(%s)	: stack_base(-13),
  %1	: register(RSI),
  [%1]	: heap_register(RSI+0),
  %h	: register(RBX),
  %2	: register(RSI),
  [%2]	: heap_register(RSI+0),
  %3	: register(RSI),
  u64(13)	: data_section(imm_1),
  u64(5)	: data_section(imm_2),
  u64(8)	: data_section(imm_3),
  char8('T')	: data_section(imm_4),
  u64(1)	: data_section(imm_5),
  char8('e')	: data_section(imm_6),
  char8('s')	: data_section(imm_7),
  char8('t')	: data_section(imm_8),
  char8('\0')	: data_section(imm_9),
  u64(31)	: data_section(imm_10),
  u64(23)	: data_section(imm_11),
  char8('H')	: data_section(imm_12),
  char8('l')	: data_section(imm_13),
  char8('o')	: data_section(imm_14),
  char8(' ')	: data_section(imm_15),
  char8('W')	: data_section(imm_16),
  char8('r')	: data_section(imm_17),
  char8('d')	: data_section(imm_18),
  char8('!')	: data_section(imm_19),
  char8('V')	: data_section(imm_20),
  char8('a')	: data_section(imm_21),
  char8('u')	: data_section(imm_22),
  char8('%')	: data_section(imm_23),
  i64(350)	: data_section(imm_24),
]
fn strings(): void
{
    SALOC %s, u64(13)
    MOV %1, %s
    FREE %s
    MOV [%1], u64(5)
    ADD %1, %1, u64(8)
    MOV [%1], char8('T')
    ADD %1, %1, u64(1)
    MOV [%1], char8('e')
    ADD %1, %1, u64(1)
    MOV [%1], char8('s')
    ADD %1, %1, u64(1)
    MOV [%1], char8('t')
    ADD %1, %1, u64(1)
    MOV [%1], char8('\0')
    FREE %1
    HALOC %h, u64(31)
    MOV %2, %h
    MOV [%2], u64(23)
    ADD %2, %2, u64(8)
    MOV [%2], char8('H')
    ADD %2, %2, u64(1)
    MOV [%2], char8('e')
    ADD %2, %2, u64(1)
    MOV [%2], char8('l')
    ADD %2, %2, u64(1)
    MOV [%2], char8('l')
    ADD %2, %2, u64(1)
    MOV [%2], char8('o')
    ADD %2, %2, u64(1)
    MOV [%2], char8(' ')
    ADD %2, %2, u64(1)
    MOV [%2], char8('W')
    ADD %2, %2, u64(1)
    MOV [%2], char8('o')
    ADD %2, %2, u64(1)
    MOV [%2], char8('r')
    ADD %2, %2, u64(1)
    MOV [%2], char8('l')
    ADD %2, %2, u64(1)
    MOV [%2], char8('d')
    ADD %2, %2, u64(1)
    MOV [%2], char8('!')
    ADD %2, %2, u64(1)
    MOV [%2], char8(' ')
    ADD %2, %2, u64(1)
    MOV [%2], char8('V')
    ADD %2, %2, u64(1)
    MOV [%2], char8('a')
    ADD %2, %2, u64(1)
    MOV [%2], char8('l')
    ADD %2, %2, u64(1)
    MOV [%2], char8('u')
    ADD %2, %2, u64(1)
    MOV [%2], char8('e')
    ADD %2, %2, u64(1)
    MOV [%2], char8(' ')
    ADD %2, %2, u64(1)
    MOV [%2], char8('%')
    ADD %2, %2, u64(1)
    MOV [%2], char8('u')
    ADD %2, %2, u64(1)
    MOV [%2], char8('!')
    ADD %2, %2, u64(1)
    MOV [%2], char8('\0')
    FREE %2
    MOV %3, %h
    ADD %3, %3, u64(8)
    CALL 'printf', , %3, i64(350)
    FREE %3
    DEL %h
    FREE %h
    RET @void
}

[stack: 128, heap: 0]
[
  %k	: register(RBX),
  %a	: register(RSI),
  mem(%a)	: stack_base(-40),
  %1	: register(RDI),
  [%1]	: heap_register(RDI+0),
  %2	: register(R12),
  %b	: register(RDI),
  mem(%b)	: stack_base(-53),
  %3	: register(R12),
  [%3]	: heap_register(R12+0),
  %c	: register(R12),
  mem(%c)	: stack_base(-125),
  %4	: register(R13),
  [%4]	: heap_register(R13+0),
  %5	: register(R14),
  %6	: register(R13),
  %x	: register(RSI),
  [%6]	: heap_register(R13+0),
  %7	: register(RSI),
  %y	: register(DIL),
  [%7]	: heap_register(RSI+0),
  %8	: register(RSI),
  %z	: register(RDI),
  [%8]	: heap_register(RSI+0),
  %9	: register(RSI),
  [%9]	: heap_register(RSI+0),
  %l	: register(RBX),
  [%c]	: heap_register(R12+0),
  %r	: register(RBX),
  %10	: register(RSI),
  [%10]	: heap_register(RSI+0),
  %11	: register(RSI),
  %s	: register(RDI),
  %12	: register(RSI),
  [%12]	: heap_register(RSI+0),
  %13	: register(R12),
  i64(5)	: data_section(imm_25),
  u64(40)	: data_section(imm_26),
  u64(4)	: data_section(imm_27),
  u64(8)	: data_section(imm_28),
  i64(1)	: data_section(imm_29),
  i64(2)	: data_section(imm_30),
  i64(3)	: data_section(imm_31),
  u64(13)	: data_section(imm_32),
  u64(5)	: data_section(imm_33),
  char8('H')	: data_section(imm_34),
  u64(1)	: data_section(imm_35),
  char8('e')	: data_section(imm_36),
  char8('l')	: data_section(imm_37),
  char8('o')	: data_section(imm_38),
  u64(72)	: data_section(imm_39),
  i64(66)	: data_section(imm_40),
  u64(0)	: data_section(imm_41),
  i64(0)	: data_section(imm_42),
  i64(6)	: data_section(imm_43),
  i64(4)	: data_section(imm_44),
  u64(10)	: data_section(imm_45),
  i64(7)	: data_section(imm_46),
]
fn arrays(): void
{
    MOV %k, i64(5)
    SALOC %a, u64(40)
    MOV %1, %a
    MOV [%1], u64(4)
    ADD %1, %1, u64(8)
    MOV [%1], i64(1)
    ADD %1, %1, u64(8)
    MOV [%1], i64(2)
    ADD %1, %1, u64(8)
    MOV [%1], i64(3)
    ADD %1, %1, u64(8)
    ADD %2, %k, i64(1)
    MOV [%1], %2
    FREE %2
    FREE %1
    SALOC %b, u64(13)
    MOV %3, %b
    MOV [%3], u64(5)
    ADD %3, %3, u64(8)
    MOV [%3], char8('H')
    ADD %3, %3, u64(1)
    MOV [%3], char8('e')
    ADD %3, %3, u64(1)
    MOV [%3], char8('l')
    ADD %3, %3, u64(1)
    MOV [%3], char8('l')
    ADD %3, %3, u64(1)
    MOV [%3], char8('o')
    FREE %3
    SALOC %c, u64(72)
    MOV %4, %c
    MOV [%4], u64(8)
    ADD %4, %4, u64(8)
    MOV %5, u64(8)
    LABL 'label_1'
    MOV [%4], i64(66)
    ADD %4, %4, u64(8)
    FREE %4
    SUB %5, %5, u64(1)
    JMPG %5, u64(0), 'label_1'
    FREE %5
    MOV %6, i64(0)
    MUL %6, %6, u64(8)
    ADD %6, %6, %a
    FREE %a
    ADD %6, %6, u64(8)
    MOV %x, [%6]
    FREE %6
    FREE %x
    MOV %7, i64(2)
    MUL %7, %7, u64(1)
    ADD %7, %7, %b
    FREE %b
    ADD %7, %7, u64(8)
    MOV %y, [%7]
    FREE %7
    FREE %y
    MOV %8, i64(6)
    MUL %8, %8, u64(8)
    ADD %8, %8, %c
    ADD %8, %8, u64(8)
    MOV %z, [%8]
    FREE %8
    FREE %z
    MOV %9, i64(6)
    MUL %9, %9, u64(8)
    ADD %9, %9, %c
    MOV [%9], %k
    FREE %k
    FREE %9
    MOV %l, [%c]
    FREE %c
    FREE %l
    HALOC %r, u64(40)
    MOV %10, %r
    MOV [%10], u64(4)
    ADD %10, %10, u64(8)
    MOV [%10], i64(1)
    ADD %10, %10, u64(8)
    MOV [%10], i64(2)
    ADD %10, %10, u64(8)
    MOV [%10], i64(3)
    ADD %10, %10, u64(8)
    MOV [%10], i64(4)
    FREE %10
    MOV %11, u64(10)
    MUL %11, %11, u64(8)
    ADD %11, %11, u64(8)
    HALOC %s, %11
    FREE %11
    MOV %12, %s
    MOV [%12], u64(10)
    ADD %12, %12, u64(8)
    MOV %13, u64(10)
    LABL 'label_2'
    MOV [%12], i64(7)
    ADD %12, %12, u64(8)
    FREE %12
    SUB %13, %13, u64(1)
    JMPG %13, u64(0), 'label_2'
    FREE %13
    DEL %r
    FREE %r
    DEL %s
    FREE %s
    RET @void
}

[stack: 0, heap: 0]
[
  %c	: register(BL),
  %s	: register(SIL),
  %a	: register(SIL),
  %x	: register(DIL),
  %y1	: register(SIL),
  %y2	: register(SI),
  %y3	: register(ESI),
  %y4	: register(RSI),
  char8('e')	: data_section(imm_47),
  char8('a')	: data_section(imm_48),
  u8(65)	: data_section(imm_49),
]
fn chars(): void
{
    MOV %c, char8('e')
    SUB %s, %c, char8('a')
    FREE %s
    MOV %a, u8(65)
    CAST %x, %a
    FREE %a
    FREE %x
    CAST %y1, %c
    FREE %y1
    CAST %y2, %c
    FREE %y2
    CAST %y3, %c
    FREE %y3
    CAST %y4, %c
    FREE %c
    FREE %y4
    RET @void
}

[stack: 0, heap: 0]
[
  %i	: register(RBX),
  %x	: register(RSI),
  %1	: register(DIL),
  %a	: register(RBX),
  %2	: register(SIL),
  i64(0)	: data_section(imm_50),
  i64(5)	: data_section(imm_51),
  i64(1)	: data_section(imm_52),
  i64(2)	: data_section(imm_53),
  bool(1)	: data_section(imm_54),
  bool(0)	: data_section(imm_55),
]
fn loops(): void
{
    MOV %i, i64(0)
    LABL 'label_3'
    JMPG %i, i64(5), 'label_4'
    ADD %x, %i, i64(1)
    SETG %1, %x, i64(2)
    FREE %x
    JMPNE %1, bool(1), 'label_5'
    FREE %1
    JMP 'label_4'
    LABL 'label_5'
    ADD %i, %i, i64(1)
    FREE %i
    JMP 'label_3'
    LABL 'label_4'
    MOV %a, i64(5)
    LABL 'label_6'
    SETG %2, %a, i64(0)
    JMPE %2, bool(0), 'label_7'
    FREE %2
    SUB %a, %a, i64(1)
    FREE %a
    JMP 'label_7'
    JMP 'label_6'
    LABL 'label_7'
    RET @void
}

[stack: 0, heap: 0]
[
  %test	: register(EBX),
  %same	: register(BL),
  u32(1)	: data_section(imm_56),
  u32(7)	: data_section(imm_57),
  u32(0)	: data_section(imm_58),
]
fn enums(): void
{
    MOV %test, u32(1)
    MOV %test, u32(7)
    FREE %test
    SETE %same, u32(0), u32(1)
    FREE %same
    RET @void
}

[stack: 0, heap: 0]
[
  %a	: register(RBX),
  %1	: register(RSI),
  %2	: register(RDI),
  %3	: register(R12),
  i64(1)	: data_section(imm_59),
  i64(2)	: data_section(imm_60),
  i64(3)	: data_section(imm_61),
  i64(6)	: data_section(imm_62),
]
fn expressions(): void
{
    ADD %a, i64(1), i64(2)
    NEG %1, i64(3)
    NEG %2, i64(6)
    MUL %3, %1, %2
    FREE %2
    FREE %1
    NEG %a, %3
    FREE %3
    FREE %a
    RET @void
}

[stack: 24, heap: 0]
[
  %1	: register(RBX),
  %p	: register(RSI),
  [%p]	: heap_register(RSI+0),
  %2	: register(RBX),
  [%2]	: heap_register(RBX+0),
  %4	: register(RBX),
  %3	: register(RDI),
  [%4]	: heap_register(RBX+0),
  %x	: stack_base(-0),
  %5	: register(RBX),
  %y	: register(RDI),
  %z	: register(RBX),
  %7	: register(R12),
  %6	: stack_base(-8),
  [%7]	: heap_register(R12+0),
  [%z]	: heap_register(RBX+0),
  %8	: register(R12),
  [%8]	: heap_register(R12+0),
  %9	: stack_base(-16),
  %k	: register(RBX),
  u64(5)	: data_section(imm_63),
  u64(8)	: data_section(imm_64),
  i64(5)	: data_section(imm_65),
  i64(2)	: data_section(imm_66),
  i64(8)	: data_section(imm_67),
  i64(0)	: data_section(imm_68),
  i64(7)	: data_section(imm_69),
  i64(3)	: data_section(imm_70),
  i64(1)	: data_section(imm_71),
  i64(9)	: data_section(imm_72),
]
fn pointers(): void
{
    MOV %1, u64(5)
    MUL %1, %1, u64(8)
    HALOC %p, %1
    FREE %1
    MOV [%p], i64(5)
    MOV %2, i64(2)
    MUL %2, %2, u64(8)
    ADD %2, %2, %p
    MOV [%2], i64(8)
    FREE %2
    MOV %4, i64(0)
    MUL %4, %4, u64(8)
    ADD %4, %4, %p
    MOV %3, [%4]
    FREE %4
    ADD %x, %3, i64(7)
    FREE %3
    MOV %5, [%p]
    ADD %y, %5, i64(3)
    FREE %5
    LEA %z, %x
    FREE %x
    MOV %7, i64(1)
    MUL %7, %7, u64(8)
    ADD %7, %7, %p
    MOV %6, [%7]
    FREE %7
    LEA %z, %6
    FREE %6
    MOV [%z], i64(3)
    MOV %8, i64(1)
    MUL %8, %8, u64(8)
    ADD %8, %8, %z
    FREE %z
    MOV [%8], i64(9)
    FREE %8
    CAST %9, %y
    FREE %y
    LEA %k, %9
    FREE %9
    FREE %k
    DEL %p
    FREE %p
    RET @void
}

[stack: 0, heap: 0]
[
  $1	: register(CL),
  %test	: register(BL),
  %1	: register(SIL),
  %g	: register(RBX),
  %2	: register(SIL),
  %j	: register(XMM7),
  %3	: register(RBX),
  %x	: register(SIL),
  %v1	: register(XMM7),
  %v2	: register(XMM8),
  %4	: register(BL),
  i64(5)	: data_section(imm_73),
  i64(3)	: data_section(imm_74),
  bool(1)	: data_section(imm_75),
  i64(1)	: data_section(imm_76),
  i64(2)	: data_section(imm_77),
  f32(1)	: data_section(imm_78),
  i64(7)	: data_section(imm_79),
]
fn boolean(bool): void
{
    SETGE %test, i64(5), i64(3)
    AND %1, %test, bool(1)
    OR %test, %1, %test
    FREE %1
    NOT %test, %test
    FREE %test
    MOV %g, i64(5)
    SETLE %2, i64(1), i64(2)
    JMPNE %2, bool(1), 'label_9'
    FREE %2
    MOV %g, i64(2)
    MOV %j, f32(1)
    FREE %j
    JMP 'label_8'
    LABL 'label_9'
    MOV %g, i64(7)
    FREE %g
    LABL 'label_8'
    ADD %3, i64(3), i64(2)
    SETG %x, i64(5), %3
    FREE %3
    FREE %x
    GVEC %v1, f32(1), f32(2), f32(3), f32(4)
    GVEC %v2, f32(1), f32(2), f32(3), f32(4)
    SETNE %4, %v1, %v2
    FREE %v2
    FREE %v1
    JMPNE %4, bool(1), 'label_10'
    FREE %4
    RET @void
    LABL 'label_10'
    RET @void
}

ext fn['GetLastError', 'Kernel32.dll'] last_error(): i64

[stack: 0, heap: 0]
[
  %err_code	: register(RBX),
  %1	: register(SIL),
  %2	: register(RBX),
  %kx	: register(RSI),
  %x6	: register(YMM7),
  %3	: register(YMM8),
  %4	: register(YMM9),
  %k2	: register(YMM7),
  i64(0)	: data_section(imm_80),
  bool(1)	: data_section(imm_81),
  i64(7)	: data_section(imm_82),
  i64(3)	: data_section(imm_83),
  i64(5)	: data_section(imm_84),
]
fn fn_calls(): void
{
    CALL 'last_error', %err_code
    SETE %1, %err_code, i64(0)
    FREE %err_code
    JMPNE %1, bool(1), 'label_11'
    FREE %1
    RET @void
    LABL 'label_11'
    ADD %2, i64(7), i64(3)
    MUL %kx, i64(5), %2
    FREE %2
    FREE %kx
    GVEC %x6, f64(1), f64(2), f64(3), f64(4)
    CALL 'add', %3, %x6, %x6
    CALL 'add', %4, %x6, %x6
    FREE %x6
    ADD %k2, %3, %4
    FREE %4
    FREE %3
    FREE %k2
    RET @void
}

[stack: 0, heap: 0]
[
  $1	: register(YMM0),
  $2	: register(YMM1),
  %2	: register(YMM7),
  %1	: register(YMM8),
]
fn add(vec4d, vec4d): vec4d
{
    MUL %2, $2, $1
    FREE $2
    ADD %1, $1, %2
    FREE %2
    FREE $1
    RET %1
    FREE %1
}

[stack: 0, heap: 0]
[
  $1	: register(CL),
  $2	: register(DL),
  %1	: register(BL),
  %r	: register(SIL),
]
fn add2(i8, i8): i8
{
    MUL %1, $2, $1
    FREE $2
    ADD %r, $1, %1
    FREE %1
    FREE $1
    RET %r
    FREE %r
}

[stack: 0, heap: 0]
[
  $1	: register(CX),
  $2	: register(DX),
  %2	: register(BX),
  %1	: register(SI),
]
fn add3(u16, u16): u16
{
    MUL %2, $2, $1
    FREE $2
    ADD %1, $1, %2
    FREE %2
    FREE $1
    RET %1
    FREE %1
}

[stack: 0, heap: 0]
[
  %1	: register(RBX),
  %2	: register(RSI),
  %a	: register(RDI),
  %b	: register(XMM7),
  %c	: register(XMM8),
  %d	: register(XMM7),
  %e	: register(XMM8),
  %k	: register(XMM9),
  %x3	: register(XMM9),
  %x4	: register(YMM9),
  %x5	: register(XMM9),
  %x6	: register(YMM10),
  %y	: register(XMM10),
  %3	: register(XMM9),
  %5	: register(XMM10),
  %4	: register(XMM11),
  %6	: register(XMM10),
  %abc	: register(YMM12),
  %7	: register(XMM9),
  %8	: register(XMM10),
  %xyz	: register(XMM7),
  %ta	: register(BL),
  %tb	: register(BX),
  %tc	: register(EBX),
  %ts	: register(RBX),
  %te	: register(RBX),
  %ua	: register(BL),
  %ub	: register(BX),
  %uc	: register(EBX),
  %us	: register(RBX),
  %ue	: register(RBX),
  i64(5)	: data_section(imm_85),
  i64(6)	: data_section(imm_86),
  i64(7)	: data_section(imm_87),
  i64(8)	: data_section(imm_88),
  f32(1,5)	: data_section(imm_89),
  f64(1,2)	: data_section(imm_90),
  f64(0,5)	: data_section(imm_91),
  f64(2)	: data_section(imm_92),
  f64(3)	: data_section(imm_93),
  f64(4)	: data_section(imm_94),
  f64(1)	: data_section(imm_95),
  i8(5)	: data_section(imm_96),
  i16(5)	: data_section(imm_97),
  i32(5)	: data_section(imm_98),
  u8(5)	: data_section(imm_99),
  u16(5)	: data_section(imm_100),
  u32(5)	: data_section(imm_101),
  u64(5)	: data_section(imm_102),
]
fn types(): void
{
    MUL %1, i64(5), i64(6)
    MUL %2, i64(7), i64(8)
    ADD %a, %1, %2
    FREE %2
    FREE %1
    FREE %a
    MOV %b, f32(1,5)
    MOV %c, %b
    FREE %b
    FREE %c
    MOV %d, f64(1,2)
    MOV %e, f64(0,5)
    MUL %k, %e, %d
    ADD %k, %k, f64(2)
    FREE %k
    GVEC %x3, f32(1), f32(2), f32(3), f32(4)
    FREE %x3
    GVEC %x4, f32(1), f32(2), f32(3), f32(4), f32(1), f32(2), f32(3), f32(4)
    FREE %x4
    GVEC %x5, f64(1), f64(2)
    GVEC %x6, f64(1), f64(2), f64(3), f64(4)
    FREE %x6
    ADD %y, %x5, %x5
    FREE %x5
    FREE %y
    MUL %3, %d, f64(2)
    MUL %5, f64(2), %d
    ADD %4, %5, f64(3)
    FREE %5
    DIV %6, %d, f64(4)
    GVEC %abc, f64(1), %3, %4, %6
    FREE %6
    FREE %4
    FREE %3
    FREE %abc
    GVEC %7, %d, %e
    GVEC %8, %e, %d
    FREE %d
    FREE %e
    ADD %xyz, %7, %8
    FREE %8
    FREE %7
    FREE %xyz
    MOV %ta, i8(5)
    FREE %ta
    MOV %tb, i16(5)
    FREE %tb
    MOV %tc, i32(5)
    FREE %tc
    MOV %ts, i64(5)
    FREE %ts
    MOV %te, i64(5)
    FREE %te
    MOV %ua, u8(5)
    FREE %ua
    MOV %ub, u16(5)
    FREE %ub
    MOV %uc, u32(5)
    FREE %uc
    MOV %us, u64(5)
    FREE %us
    MOV %ue, u64(5)
    FREE %ue
    RET @void
}

[stack: 0, heap: 0]
[
]
fn empty(): void
{
    RET @void
}

[stack: 0, heap: 0]
[
  %x	: register(EBX),
  %y1	: register(RSI),
  %y2	: register(ESI),
  %y3	: register(SI),
  %y4	: register(DIL),
  %y5	: register(RDI),
  %y6	: register(R12D),
  %y7	: register(R13W),
  %y8	: register(R13B),
  %z1	: register(XMM7),
  %z2	: register(XMM7),
  %z3	: register(XMM7),
  %z4	: register(XMM7),
  %z5	: register(XMM7),
  i64(5)	: data_section(imm_103),
]
fn type_casting_int(): void
{
    CAST %x, i64(5)
    CAST %y1, %x
    FREE %y1
    MOV %y2, %x
    FREE %y2
    CAST %y3, %x
    CAST %y4, %x
    FREE %y4
    CAST %y5, %x
    CAST %y6, %x
    CAST %y7, %x
    FREE %y7
    CAST %y8, %x
    FREE %x
    FREE %y8
    CAST %z1, %y3
    FREE %z1
    CAST %z2, %y3
    FREE %y3
    FREE %z2
    CAST %z3, %y6
    FREE %z3
    CAST %z4, %y6
    FREE %y6
    FREE %z4
    CAST %z5, %y5
    FREE %y5
    FREE %z5
    RET @void
}

[stack: 0, heap: 0]
[
  %v4f	: register(XMM7),
  %v1	: register(XMM8),
  %v2	: register(YMM8),
  %v3	: register(XMM8),
  %v4	: register(YMM8),
  %v8f	: register(YMM7),
  %v5	: register(XMM8),
  %v6	: register(YMM8),
  %v7	: register(XMM8),
  %v8	: register(YMM8),
  %v2d	: register(XMM7),
  %vd1	: register(XMM8),
  %vd2	: register(YMM8),
  %vd3	: register(XMM8),
  %vd4	: register(YMM8),
  %v4d	: register(YMM7),
  %vd5	: register(XMM8),
  %vd6	: register(YMM8),
  %vd7	: register(XMM8),
  %vd8	: register(YMM8),
  %1	: register(RBX),
  %pv	: register(RSI),
  %2	: register(XMM7),
  [%pv]	: heap_register(RSI+0),
  %pv1	: register(YMM8),
  u64(1)	: data_section(imm_104),
  u64(16)	: data_section(imm_105),
]
fn type_casting_float(): void
{
    GVEC %v4f, f32(1), f32(2), f32(3), f32(4)
    MOV %v1, %v4f
    FREE %v1
    CAST %v2, %v4f
    FREE %v2
    CAST %v3, %v4f
    FREE %v3
    CAST %v4, %v4f
    FREE %v4f
    FREE %v4
    GVEC %v8f, f32(1), f32(2), f32(3), f32(4), f32(5), f32(6), f32(7), f32(8)
    CAST %v5, %v8f
    FREE %v5
    MOV %v6, %v8f
    FREE %v6
    CAST %v7, %v8f
    FREE %v7
    CAST %v8, %v8f
    FREE %v8f
    FREE %v8
    GVEC %v2d, f64(1), f64(2)
    CAST %vd1, %v2d
    FREE %vd1
    CAST %vd2, %v2d
    FREE %vd2
    MOV %vd3, %v2d
    FREE %vd3
    CAST %vd4, %v2d
    FREE %v2d
    FREE %vd4
    GVEC %v4d, f64(1), f64(2), f64(3), f64(4)
    CAST %vd5, %v4d
    FREE %vd5
    CAST %vd6, %v4d
    FREE %vd6
    CAST %vd7, %v4d
    FREE %vd7
    MOV %vd8, %v4d
    FREE %v4d
    FREE %vd8
    MOV %1, u64(1)
    MUL %1, %1, u64(16)
    HALOC %pv, %1
    FREE %1
    MOV %2, [%pv]
    FREE %pv
    CAST %pv1, %2
    FREE %2
    FREE %pv1
    RET @void
}

ext fn['ExitProcess', 'Kernel32.dll'] erc_exit_process(u32): void

ext fn['GetProcessHeap', 'Kernel32.dll'] erc_get_process_heap(): void*

ext fn['HeapAlloc', 'Kernel32.dll'] erc_heap_alloc(void*, u32, u64): void*

ext fn['HeapFree', 'Kernel32.dll'] erc_heap_free(void*, u32, void*): bool

ext fn['printf', 'MSVCRT.DLL'] printf(char8*): i32



format PE64 NX console 6.0
entry start
include 'win64a.inc'

section '.data' data readable writeable

immv_11 dq 1.0,2.0,3.0,4.0
immv_9 dd 1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0
immv_3 dq 1.0,2.0,3.0,4.0
immv_5 dd 1.0,2.0,3.0,4.0,1.0,2.0,3.0,4.0
immv_7 dq 1.0,2.0,3.0,4.0
immv_1 dd 1.0,2.0,3.0,4.0
immv_2 dd 1.0,2.0,3.0,4.0
immv_4 dd 1.0,2.0,3.0,4.0
immv_6 dq 1.0,2.0
immv_8 dd 1.0,2.0,3.0,4.0
immv_10 dq 1.0,2.0
imm_70 dq 3
imm_76 dq 1
imm_77 dq 2
imm_73 dq 5
imm_72 dq 9
imm_71 dq 1
imm_74 dq 3
imm_69 dq 7
imm_64 dq 8
imm_67 dq 8
imm_66 dq 2
imm_65 dq 5
imm_63 dq 5
imm_62 dq 6
imm_61 dq 3
imm_60 dq 2
erc_process_heap dq 0
imm_68 dq 0
imm_1 dq 13
imm_83 dq 3
imm_80 dq 0
imm_105 dq 16
imm_104 dq 1
imm_103 dq 5
imm_102 dq 5
imm_95 dq 1.0
imm_94 dq 4.0
imm_93 dq 3.0
imm_92 dq 2.0
imm_91 dq 0.5
imm_90 dq 1.2
imm_88 dq 8
imm_87 dq 7
imm_86 dq 6
imm_85 dq 5
imm_84 dq 5
imm_53 dq 2
imm_82 dq 7
imm_79 dq 7
imm_52 dq 1
imm_59 dq 1
imm_50 dq 0
imm_32 dq 13
imm_31 dq 3
imm_30 dq 2
imm_29 dq 1
imm_28 dq 8
imm_27 dq 4
imm_33 dq 5
imm_51 dq 5
imm_24 dq 350
imm_11 dq 23
imm_10 dq 31
imm_5 dq 1
imm_3 dq 8
imm_2 dq 5
imm_25 dq 5
imm_35 dq 1
imm_26 dq 40
erc_u32_zero dd 0
imm_45 dq 10
imm_44 dq 4
imm_43 dq 6
imm_42 dq 0
imm_41 dq 0
imm_46 dq 7
imm_39 dq 72
imm_40 dq 66
imm_78 dd 1.0
imm_101 dd 5
imm_89 dd 1.5
imm_56 dd 1
imm_98 dd 5
imm_58 dd 0
imm_57 dd 7
imm_100 dw 5
imm_97 dw 5
imm_7 db 115 ; 's'
imm_6 db 101 ; 'e'
imm_12 db 72 ; 'H'
imm_54 db 1
imm_13 db 108 ; 'l'
imm_55 db 0
imm_4 db 84 ; 'T'
imm_99 db 5
imm_8 db 116 ; 't'
imm_9 db 0 ; '\0'
imm_18 db 100 ; 'd'
imm_14 db 111 ; 'o'
imm_36 db 101 ; 'e'
imm_34 db 72 ; 'H'
imm_75 db 1
imm_81 db 1
imm_47 db 101 ; 'e'
imm_48 db 97 ; 'a'
imm_49 db 65
imm_96 db 5
imm_23 db 37 ; '%'
imm_21 db 97 ; 'a'
imm_20 db 86 ; 'V'
imm_19 db 33 ; '!'
imm_38 db 111 ; 'o'
imm_17 db 114 ; 'r'
imm_16 db 87 ; 'W'
imm_15 db 32 ; ' '
imm_22 db 117 ; 'u'
imm_37 db 108 ; 'l'

section '.text' code readable executable
start:
call [GetProcessHeap]
mov [erc_process_heap], rax
push rbp
mov rbp, rsp
call fn_main
pop rbp
xor ecx,ecx
call [ExitProcess]

fn_main:
MOV RBP, RSP
;CALL 'strings', 
SUB RSP, 0x20
CALL fn_strings
ADD RSP, 0x20
;RET @void
RET

fn_strings:
MOV RBP, RSP
SUB RSP, 16
;SALOC %s, u64(13)
LEA RBX, [RBP-13]
;MOV %1, %s
MOV RSI, RBX
;MOV [%1], u64(5)
MOV RAX, [imm_2]
MOV [RSI], RAX
;ADD %1, %1, u64(8)
ADD RSI, [imm_3]
;MOV [%1], char8('T')
MOV AL, [imm_4]
MOV [RSI], AL
;ADD %1, %1, u64(1)
ADD RSI, [imm_5]
;MOV [%1], char8('e')
MOV AL, [imm_6]
MOV [RSI], AL
;ADD %1, %1, u64(1)
ADD RSI, [imm_5]
;MOV [%1], char8('s')
MOV AL, [imm_7]
MOV [RSI], AL
;ADD %1, %1, u64(1)
ADD RSI, [imm_5]
;MOV [%1], char8('t')
MOV AL, [imm_8]
MOV [RSI], AL
;ADD %1, %1, u64(1)
ADD RSI, [imm_5]
;MOV [%1], char8('\0')
MOV AL, [imm_9]
MOV [RSI], AL
;HALOC %h, u64(31)
PUSH RSI
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, [imm_10]
SUB RSP, 0x20
CALL [HeapAlloc]
ADD RSP, 0x20
MOV RBX, RAX
POP RSI
;MOV %2, %h
MOV RSI, RBX
;MOV [%2], u64(23)
MOV RAX, [imm_11]
MOV [RSI], RAX
;ADD %2, %2, u64(8)
ADD RSI, [imm_3]
;MOV [%2], char8('H')
MOV AL, [imm_12]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('e')
MOV AL, [imm_6]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('l')
MOV AL, [imm_13]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('l')
MOV AL, [imm_13]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('o')
MOV AL, [imm_14]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8(' ')
MOV AL, [imm_15]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('W')
MOV AL, [imm_16]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('o')
MOV AL, [imm_14]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('r')
MOV AL, [imm_17]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('l')
MOV AL, [imm_13]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('d')
MOV AL, [imm_18]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('!')
MOV AL, [imm_19]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8(' ')
MOV AL, [imm_15]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('V')
MOV AL, [imm_20]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('a')
MOV AL, [imm_21]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('l')
MOV AL, [imm_13]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('u')
MOV AL, [imm_22]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('e')
MOV AL, [imm_6]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8(' ')
MOV AL, [imm_15]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('%')
MOV AL, [imm_23]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('u')
MOV AL, [imm_22]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('!')
MOV AL, [imm_19]
MOV [RSI], AL
;ADD %2, %2, u64(1)
ADD RSI, [imm_5]
;MOV [%2], char8('\0')
MOV AL, [imm_9]
MOV [RSI], AL
;MOV %3, %h
MOV RSI, RBX
;ADD %3, %3, u64(8)
ADD RSI, [imm_3]
;CALL 'printf', , %3, i64(350)
PUSH RBX
PUSH RSI
MOV RCX, RSI
MOV RDX, [imm_24]
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RSI
POP RBX
;DEL %h
PUSH RBX
PUSH RSI
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RBX
SUB RSP, 0x20
CALL [HeapFree]
ADD RSP, 0x20
POP RSI
POP RBX
;RET @void
ADD RSP, 16
RET

fn_arrays:
MOV RBP, RSP
SUB RSP, 128
;MOV %k, i64(5)
MOV RBX, [imm_25]
;SALOC %a, u64(40)
LEA RSI, [RBP-40]
;MOV %1, %a
MOV RDI, RSI
;MOV [%1], u64(4)
MOV RAX, [imm_27]
MOV [RDI], RAX
;ADD %1, %1, u64(8)
ADD RDI, [imm_28]
;MOV [%1], i64(1)
MOV RAX, [imm_29]
MOV [RDI], RAX
;ADD %1, %1, u64(8)
ADD RDI, [imm_28]
;MOV [%1], i64(2)
MOV RAX, [imm_30]
MOV [RDI], RAX
;ADD %1, %1, u64(8)
ADD RDI, [imm_28]
;MOV [%1], i64(3)
MOV RAX, [imm_31]
MOV [RDI], RAX
;ADD %1, %1, u64(8)
ADD RDI, [imm_28]
;ADD %2, %k, i64(1)
MOV R12, RBX
ADD R12, [imm_29]
;MOV [%1], %2
MOV [RDI], R12
;SALOC %b, u64(13)
LEA RDI, [RBP-53]
;MOV %3, %b
MOV R12, RDI
;MOV [%3], u64(5)
MOV RAX, [imm_33]
MOV [R12], RAX
;ADD %3, %3, u64(8)
ADD R12, [imm_28]
;MOV [%3], char8('H')
MOV AL, [imm_34]
MOV [R12], AL
;ADD %3, %3, u64(1)
ADD R12, [imm_35]
;MOV [%3], char8('e')
MOV AL, [imm_36]
MOV [R12], AL
;ADD %3, %3, u64(1)
ADD R12, [imm_35]
;MOV [%3], char8('l')
MOV AL, [imm_37]
MOV [R12], AL
;ADD %3, %3, u64(1)
ADD R12, [imm_35]
;MOV [%3], char8('l')
MOV AL, [imm_37]
MOV [R12], AL
;ADD %3, %3, u64(1)
ADD R12, [imm_35]
;MOV [%3], char8('o')
MOV AL, [imm_38]
MOV [R12], AL
;SALOC %c, u64(72)
LEA R12, [RBP-125]
;MOV %4, %c
MOV R13, R12
;MOV [%4], u64(8)
MOV RAX, [imm_28]
MOV [R13], RAX
;ADD %4, %4, u64(8)
ADD R13, [imm_28]
;MOV %5, u64(8)
MOV R14, [imm_28]
;LABL 'label_1'
label_1:
;MOV [%4], i64(66)
MOV RAX, [imm_40]
MOV [R13], RAX
;ADD %4, %4, u64(8)
ADD R13, [imm_28]
;SUB %5, %5, u64(1)
SUB R14, [imm_35]
;JMPG %5, u64(0), 'label_1'
CMP R14, [imm_41]
JG label_1
;MOV %6, i64(0)
MOV R13, [imm_42]
;MUL %6, %6, u64(8)
MOV RAX, R13
MUL [imm_28]
MOV R13, RAX
;ADD %6, %6, %a
ADD R13, RSI
;ADD %6, %6, u64(8)
ADD R13, [imm_28]
;MOV %x, [%6]
MOV RSI, [R13]
;MOV %7, i64(2)
MOV RSI, [imm_30]
;MUL %7, %7, u64(1)
MOV RAX, RSI
MUL [imm_35]
MOV RSI, RAX
;ADD %7, %7, %b
ADD RSI, RDI
;ADD %7, %7, u64(8)
ADD RSI, [imm_28]
;MOV %y, [%7]
MOV DIL, [RSI]
;MOV %8, i64(6)
MOV RSI, [imm_43]
;MUL %8, %8, u64(8)
MOV RAX, RSI
MUL [imm_28]
MOV RSI, RAX
;ADD %8, %8, %c
ADD RSI, R12
;ADD %8, %8, u64(8)
ADD RSI, [imm_28]
;MOV %z, [%8]
MOV RDI, [RSI]
;MOV %9, i64(6)
MOV RSI, [imm_43]
;MUL %9, %9, u64(8)
MOV RAX, RSI
MUL [imm_28]
MOV RSI, RAX
;ADD %9, %9, %c
ADD RSI, R12
;MOV [%9], %k
MOV [RSI], RBX
;MOV %l, [%c]
MOV RBX, [R12]
;HALOC %r, u64(40)
PUSH R14
PUSH R13
PUSH RDI
PUSH RSI
PUSH R12
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, [imm_26]
SUB RSP, 0x20
CALL [HeapAlloc]
ADD RSP, 0x20
MOV RBX, RAX
POP R12
POP RSI
POP RDI
POP R13
POP R14
;MOV %10, %r
MOV RSI, RBX
;MOV [%10], u64(4)
MOV RAX, [imm_27]
MOV [RSI], RAX
;ADD %10, %10, u64(8)
ADD RSI, [imm_28]
;MOV [%10], i64(1)
MOV RAX, [imm_29]
MOV [RSI], RAX
;ADD %10, %10, u64(8)
ADD RSI, [imm_28]
;MOV [%10], i64(2)
MOV RAX, [imm_30]
MOV [RSI], RAX
;ADD %10, %10, u64(8)
ADD RSI, [imm_28]
;MOV [%10], i64(3)
MOV RAX, [imm_31]
MOV [RSI], RAX
;ADD %10, %10, u64(8)
ADD RSI, [imm_28]
;MOV [%10], i64(4)
MOV RAX, [imm_44]
MOV [RSI], RAX
;MOV %11, u64(10)
MOV RSI, [imm_45]
;MUL %11, %11, u64(8)
MOV RAX, RSI
MUL [imm_28]
MOV RSI, RAX
;ADD %11, %11, u64(8)
ADD RSI, [imm_28]
;HALOC %s, %11
PUSH R14
PUSH R13
PUSH R12
PUSH RBX
PUSH RSI
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RSI
SUB RSP, 0x20
CALL [HeapAlloc]
ADD RSP, 0x20
MOV RDI, RAX
POP RSI
POP RBX
POP R12
POP R13
POP R14
;MOV %12, %s
MOV RSI, RDI
;MOV [%12], u64(10)
MOV RAX, [imm_45]
MOV [RSI], RAX
;ADD %12, %12, u64(8)
ADD RSI, [imm_28]
;MOV %13, u64(10)
MOV R12, [imm_45]
;LABL 'label_2'
label_2:
;MOV [%12], i64(7)
MOV RAX, [imm_46]
MOV [RSI], RAX
;ADD %12, %12, u64(8)
ADD RSI, [imm_28]
;SUB %13, %13, u64(1)
SUB R12, [imm_35]
;JMPG %13, u64(0), 'label_2'
CMP R12, [imm_41]
JG label_2
;DEL %r
PUSH R14
PUSH R13
PUSH RDI
PUSH RBX
PUSH RSI
PUSH R12
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RBX
SUB RSP, 0x20
CALL [HeapFree]
ADD RSP, 0x20
POP R12
POP RSI
POP RBX
POP RDI
POP R13
POP R14
;DEL %s
PUSH R14
PUSH R13
PUSH RDI
PUSH RSI
PUSH R12
PUSH RBX
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RDI
SUB RSP, 0x20
CALL [HeapFree]
ADD RSP, 0x20
POP RBX
POP R12
POP RSI
POP RDI
POP R13
POP R14
;RET @void
ADD RSP, 128
RET

fn_chars:
MOV RBP, RSP
;MOV %c, char8('e')
MOV BL, [imm_47]
;SUB %s, %c, char8('a')
MOV SIL, BL
SUB SIL, [imm_48]
;MOV %a, u8(65)
MOV SIL, [imm_49]
;CAST %x, %a
MOV DIL, SIL
;CAST %y1, %c
MOV SIL, BL
;CAST %y2, %c
MOV SIL, BL
;CAST %y3, %c
MOV SIL, BL
;CAST %y4, %c
MOV SIL, BL
;RET @void
RET

fn_loops:
MOV RBP, RSP
;MOV %i, i64(0)
MOV RBX, [imm_50]
;LABL 'label_3'
label_3:
;JMPG %i, i64(5), 'label_4'
CMP RBX, [imm_51]
JG label_4
;ADD %x, %i, i64(1)
MOV RSI, RBX
ADD RSI, [imm_52]
;SETG %1, %x, i64(2)
CMP RSI, [imm_53]
SETG DIL
;JMPNE %1, bool(1), 'label_5'
CMP DIL, [imm_54]
JNE label_5
;JMP 'label_4'
JMP label_4
;LABL 'label_5'
label_5:
;ADD %i, %i, i64(1)
ADD RBX, [imm_52]
;JMP 'label_3'
JMP label_3
;LABL 'label_4'
label_4:
;MOV %a, i64(5)
MOV RBX, [imm_51]
;LABL 'label_6'
label_6:
;SETG %2, %a, i64(0)
CMP RBX, [imm_50]
SETG SIL
;JMPE %2, bool(0), 'label_7'
CMP SIL, [imm_55]
JE label_7
;SUB %a, %a, i64(1)
SUB RBX, [imm_52]
;JMP 'label_7'
JMP label_7
;JMP 'label_6'
JMP label_6
;LABL 'label_7'
label_7:
;RET @void
RET

fn_enums:
MOV RBP, RSP
;MOV %test, u32(1)
MOV EBX, [imm_56]
;MOV %test, u32(7)
MOV EBX, [imm_57]
;SETE %same, u32(0), u32(1)
MOV EAX, [imm_58]
CMP EAX, [imm_56]
SETE BL
;RET @void
RET

fn_expressions:
MOV RBP, RSP
;ADD %a, i64(1), i64(2)
MOV RBX, [imm_59]
ADD RBX, [imm_60]
;NEG %1, i64(3)
XOR RSI, RSI
SUB RSI, [imm_61]
;NEG %2, i64(6)
XOR RDI, RDI
SUB RDI, [imm_62]
;MUL %3, %1, %2
MOV RAX, RSI
IMUL RDI
MOV R12, RAX
;NEG %a, %3
XOR RBX, RBX
SUB RBX, R12
;RET @void
RET

fn_pointers:
MOV RBP, RSP
SUB RSP, 24
;MOV %1, u64(5)
MOV RBX, [imm_63]
;MUL %1, %1, u64(8)
MOV RAX, RBX
MUL [imm_64]
MOV RBX, RAX
;HALOC %p, %1
PUSH RBX
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RBX
SUB RSP, 0x20
CALL [HeapAlloc]
ADD RSP, 0x20
MOV RSI, RAX
POP RBX
;MOV [%p], i64(5)
MOV RAX, [imm_65]
MOV [RSI], RAX
;MOV %2, i64(2)
MOV RBX, [imm_66]
;MUL %2, %2, u64(8)
MOV RAX, RBX
MUL [imm_64]
MOV RBX, RAX
;ADD %2, %2, %p
ADD RBX, RSI
;MOV [%2], i64(8)
MOV RAX, [imm_67]
MOV [RBX], RAX
;MOV %4, i64(0)
MOV RBX, [imm_68]
;MUL %4, %4, u64(8)
MOV RAX, RBX
MUL [imm_64]
MOV RBX, RAX
;ADD %4, %4, %p
ADD RBX, RSI
;MOV %3, [%4]
MOV RDI, [RBX]
;ADD %x, %3, i64(7)
MOV RAX, RDI
ADD RAX, [imm_69]
MOV [RBP], RAX
;MOV %5, [%p]
MOV RBX, [RSI]
;ADD %y, %5, i64(3)
MOV RDI, RBX
ADD RDI, [imm_70]
;LEA %z, %x
LEA RBX, [RBP]
;MOV %7, i64(1)
MOV R12, [imm_71]
;MUL %7, %7, u64(8)
MOV RAX, R12
MUL [imm_64]
MOV R12, RAX
;ADD %7, %7, %p
ADD R12, RSI
;MOV %6, [%7]
MOV RAX, [R12]
MOV [RBP-8], RAX
;LEA %z, %6
LEA RBX, [RBP-8]
;MOV [%z], i64(3)
MOV RAX, [imm_70]
MOV [RBX], RAX
;MOV %8, i64(1)
MOV R12, [imm_71]
;MUL %8, %8, u64(8)
MOV RAX, R12
MUL [imm_64]
MOV R12, RAX
;ADD %8, %8, %z
ADD R12, RBX
;MOV [%8], i64(9)
MOV RAX, [imm_72]
MOV [R12], RAX
;CAST %9, %y
MOV [RBP-16], EDI
;LEA %k, %9
LEA RBX, [RBP-16]
;DEL %p
PUSH RSI
PUSH R12
PUSH RDI
PUSH RBX
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RSI
SUB RSP, 0x20
CALL [HeapFree]
ADD RSP, 0x20
POP RBX
POP RDI
POP R12
POP RSI
;RET @void
ADD RSP, 24
RET

fn_boolean:
MOV RBP, RSP
;SETGE %test, i64(5), i64(3)
MOV RAX, [imm_73]
CMP RAX, [imm_74]
SETGE BL
;AND %1, %test, bool(1)
MOV SIL, BL
AND SIL, [imm_75]
;OR %test, %1, %test
MOV BL, SIL
OR BL, BL
;NOT %test, %test
NOT BL
;MOV %g, i64(5)
MOV RBX, [imm_73]
;SETLE %2, i64(1), i64(2)
MOV RAX, [imm_76]
CMP RAX, [imm_77]
SETLE SIL
;JMPNE %2, bool(1), 'label_9'
CMP SIL, [imm_75]
JNE label_9
;MOV %g, i64(2)
MOV RBX, [imm_77]
;MOV %j, f32(1)
MOVSS XMM7, [imm_78]
;JMP 'label_8'
JMP label_8
;LABL 'label_9'
label_9:
;MOV %g, i64(7)
MOV RBX, [imm_79]
;LABL 'label_8'
label_8:
;ADD %3, i64(3), i64(2)
MOV RBX, [imm_74]
ADD RBX, [imm_77]
;SETG %x, i64(5), %3
CMP [imm_73], RBX
SETG SIL
;GVEC %v1, f32(1), f32(2), f32(3), f32(4)
MOVUPS XMM7, dqword [immv_1]
;GVEC %v2, f32(1), f32(2), f32(3), f32(4)
MOVUPS XMM8, dqword [immv_2]
;SETNE %4, %v1, %v2
MOVAPS XMM4, XMM7
CMPEQPS XMM4, XMM8
MOVMSKPS EAX, XMM4
CMP EAX, 0xF
SETE BL
;JMPNE %4, bool(1), 'label_10'
CMP BL, [imm_75]
JNE label_10
;RET @void
RET
;LABL 'label_10'
label_10:
;RET @void
RET

fn_fn_calls:
MOV RBP, RSP
;CALL 'last_error', %err_code
SUB RSP, 0x20
CALL [GetLastError]
ADD RSP, 0x20
MOV RBX, RAX
;SETE %1, %err_code, i64(0)
CMP RBX, [imm_80]
SETE SIL
;JMPNE %1, bool(1), 'label_11'
CMP SIL, [imm_81]
JNE label_11
;RET @void
RET
;LABL 'label_11'
label_11:
;ADD %2, i64(7), i64(3)
MOV RBX, [imm_82]
ADD RBX, [imm_83]
;MUL %kx, i64(5), %2
MOV RAX, [imm_84]
IMUL RBX
MOV RSI, RAX
;GVEC %x6, f64(1), f64(2), f64(3), f64(4)
VMOVUPD YMM7, qqword [immv_3]
;CALL 'add', %3, %x6, %x6
PUSH RBX
PUSH RSI
SUB RSP, 32
VMOVUPD [RSP], YMM7
VMOVAPD YMM0, YMM7
VMOVAPD YMM1, YMM7
SUB RSP, 0x20
CALL fn_add
ADD RSP, 0x20
VMOVAPD YMM8, YMM0
VMOVUPD YMM7, [RSP]
ADD RSP, 32
POP RSI
POP RBX
;CALL 'add', %4, %x6, %x6
PUSH RBX
PUSH RSI
SUB RSP, 32
VMOVUPD [RSP], YMM7
SUB RSP, 32
VMOVUPD [RSP], YMM8
VMOVAPD YMM0, YMM7
VMOVAPD YMM1, YMM7
SUB RSP, 0x20
CALL fn_add
ADD RSP, 0x20
VMOVAPD YMM9, YMM0
VMOVUPD YMM8, [RSP]
ADD RSP, 32
VMOVUPD YMM7, [RSP]
ADD RSP, 32
POP RSI
POP RBX
;ADD %k2, %3, %4
VADDPD YMM7, YMM8, YMM9
;RET @void
RET

fn_add:
MOV RBP, RSP
;MUL %2, $2, $1
VMULPD YMM7, YMM1, YMM0
;ADD %1, $1, %2
VADDPD YMM8, YMM0, YMM7
;RET %1
VMOVAPD YMM0, YMM8
RET

fn_add2:
MOV RBP, RSP
;MUL %1, $2, $1
MOV AL, DL
IMUL CL
MOV BL, AL
;ADD %r, $1, %1
MOV SIL, CL
ADD SIL, BL
;RET %r
MOV AL, SIL
RET

fn_add3:
MOV RBP, RSP
;MUL %2, $2, $1
MOV AX, DX
MUL CX
MOV BX, AX
;ADD %1, $1, %2
MOV SI, CX
ADD SI, BX
;RET %1
MOV AX, SI
RET

fn_types:
MOV RBP, RSP
;MUL %1, i64(5), i64(6)
MOV RAX, [imm_85]
IMUL [imm_86]
MOV RBX, RAX
;MUL %2, i64(7), i64(8)
MOV RAX, [imm_87]
IMUL [imm_88]
MOV RSI, RAX
;ADD %a, %1, %2
MOV RDI, RBX
ADD RDI, RSI
;MOV %b, f32(1,5)
MOVSS XMM7, [imm_89]
;MOV %c, %b
MOVSS XMM8, XMM7
;MOV %d, f64(1,2)
MOVSD XMM7, [imm_90]
;MOV %e, f64(0,5)
MOVSD XMM8, [imm_91]
;MUL %k, %e, %d
MOVSD XMM9, XMM8
MULSD XMM9, XMM7
;ADD %k, %k, f64(2)
ADDSD XMM9, [imm_92]
;GVEC %x3, f32(1), f32(2), f32(3), f32(4)
MOVUPS XMM9, dqword [immv_4]
;GVEC %x4, f32(1), f32(2), f32(3), f32(4), f32(1), f32(2), f32(3), f32(4)
VMOVUPS YMM9, qqword [immv_5]
;GVEC %x5, f64(1), f64(2)
MOVUPD XMM9, dqword [immv_6]
;GVEC %x6, f64(1), f64(2), f64(3), f64(4)
VMOVUPD YMM10, qqword [immv_7]
;ADD %y, %x5, %x5
MOVAPD XMM10, XMM9
ADDPD XMM10, XMM9
;MUL %3, %d, f64(2)
MOVSD XMM9, XMM7
MULSD XMM9, [imm_92]
;MUL %5, f64(2), %d
MOVSD XMM10, [imm_92]
MULSD XMM10, XMM7
;ADD %4, %5, f64(3)
MOVSD XMM11, XMM10
ADDSD XMM11, [imm_93]
;DIV %6, %d, f64(4)
MOVSD XMM10, XMM7
DIVSD XMM10, [imm_94]
;GVEC %abc, f64(1), %3, %4, %6
MOV R10, RSP
AND RSP, -32
SUB RSP, 8
MOVSD [RSP], XMM10
SUB RSP, 8
MOVSD [RSP], XMM11
SUB RSP, 8
MOVSD [RSP], XMM9
MOVSD XMM4, [imm_95]
SUB RSP, 8
MOVSD [RSP], XMM4
VMOVUPD YMM12, [RSP]
MOV RSP, R10
;GVEC %7, %d, %e
MOV R10, RSP
AND RSP, -16
SUB RSP, 8
MOVSD [RSP], XMM8
SUB RSP, 8
MOVSD [RSP], XMM7
MOVUPD XMM9, [RSP]
MOV RSP, R10
;GVEC %8, %e, %d
MOV R10, RSP
AND RSP, -16
SUB RSP, 8
MOVSD [RSP], XMM7
SUB RSP, 8
MOVSD [RSP], XMM8
MOVUPD XMM10, [RSP]
MOV RSP, R10
;ADD %xyz, %7, %8
MOVAPD XMM7, XMM9
ADDPD XMM7, XMM10
;MOV %ta, i8(5)
MOV BL, [imm_96]
;MOV %tb, i16(5)
MOV BX, [imm_97]
;MOV %tc, i32(5)
MOV EBX, [imm_98]
;MOV %ts, i64(5)
MOV RBX, [imm_85]
;MOV %te, i64(5)
MOV RBX, [imm_85]
;MOV %ua, u8(5)
MOV BL, [imm_99]
;MOV %ub, u16(5)
MOV BX, [imm_100]
;MOV %uc, u32(5)
MOV EBX, [imm_101]
;MOV %us, u64(5)
MOV RBX, [imm_102]
;MOV %ue, u64(5)
MOV RBX, [imm_102]
;RET @void
RET

fn_empty:
MOV RBP, RSP
;RET @void
RET

fn_type_casting_int:
MOV RBP, RSP
;CAST %x, i64(5)
MOV EBX, dword [imm_103]
;CAST %y1, %x
MOVSXD RSI, EBX
;MOV %y2, %x
MOV ESI, EBX
;CAST %y3, %x
MOV SI, BX
;CAST %y4, %x
MOV DIL, BL
;CAST %y5, %x
MOV EDI, EBX
;CAST %y6, %x
MOV R12D, EBX
;CAST %y7, %x
MOV R13W, BX
;CAST %y8, %x
MOV R13B, BL
;CAST %z1, %y3
MOVSX EAX, SI
MOVD XMM7, EAX
CVTDQ2PS XMM7, XMM7
;CAST %z2, %y3
MOVSX EAX, SI
MOVD XMM7, EAX
CVTDQ2PD XMM7, XMM7
;CAST %z3, %y6
MOV EAX, R12D
XORPS XMM7, XMM7
CVTSI2SS XMM7, RAX
;CAST %z4, %y6
MOV EAX, R12D
XORPS XMM7, XMM7
CVTSI2SD XMM7, RAX
;CAST %z5, %y5
XORPS XMM7, XMM7
MOV RAX, RDI
TEST RAX, RAX
JS u64tof_1
CVTSI2SS XMM7, RAX
JMP u64tof_2
u64tof_1:
MOV R10, RAX
AND R10, 1
SHR RAX, 1
OR RAX, R10
CVTSI2SS XMM7, RAX
ADDSS XMM7, XMM7
u64tof_2:
;RET @void
RET

fn_type_casting_float:
MOV RBP, RSP
;GVEC %v4f, f32(1), f32(2), f32(3), f32(4)
MOVUPS XMM7, dqword [immv_8]
;MOV %v1, %v4f
MOVAPS XMM8, XMM7
;CAST %v2, %v4f
MOVAPS XMM8, XMM7
;CAST %v3, %v4f
VXORPS XMM8, XMM8, XMM8
CVTPS2PD XMM8, XMM7
;CAST %v4, %v4f
VXORPS YMM8, YMM8, YMM8
VCVTPS2PD YMM8, XMM7
;GVEC %v8f, f32(1), f32(2), f32(3), f32(4), f32(5), f32(6), f32(7), f32(8)
VMOVUPS YMM7, qqword [immv_9]
;CAST %v5, %v8f
MOVAPS XMM8, XMM7
;MOV %v6, %v8f
VMOVAPS YMM8, YMM7
;CAST %v7, %v8f
VXORPS XMM8, XMM8, XMM8
CVTPS2PD XMM8, XMM7
;CAST %v8, %v8f
VXORPS YMM8, YMM8, YMM8
VCVTPS2PD YMM8, XMM7
;GVEC %v2d, f64(1), f64(2)
MOVUPD XMM7, dqword [immv_10]
;CAST %vd1, %v2d
VXORPS XMM8, XMM8, XMM8
CVTPD2PS XMM8, XMM7
;CAST %vd2, %v2d
VXORPS YMM8, YMM8, YMM8
CVTPD2PS XMM8, XMM7
;MOV %vd3, %v2d
MOVAPD XMM8, XMM7
;CAST %vd4, %v2d
MOVAPD XMM8, XMM7
;GVEC %v4d, f64(1), f64(2), f64(3), f64(4)
VMOVUPD YMM7, qqword [immv_11]
;CAST %vd5, %v4d
VXORPS XMM8, XMM8, XMM8
VCVTPD2PS XMM8, YMM7
;CAST %vd6, %v4d
VXORPS YMM8, YMM8, YMM8
VCVTPD2PS XMM8, YMM7
;CAST %vd7, %v4d
VMOVAPD XMM8, XMM7
;MOV %vd8, %v4d
VMOVAPD YMM8, YMM7
;MOV %1, u64(1)
MOV RBX, [imm_104]
;MUL %1, %1, u64(16)
MOV RAX, RBX
MUL [imm_105]
MOV RBX, RAX
;HALOC %pv, %1
SUB RSP, 32
VMOVUPD [RSP], YMM7
SUB RSP, 32
VMOVUPD [RSP], YMM8
PUSH RBX
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RBX
SUB RSP, 0x20
CALL [HeapAlloc]
ADD RSP, 0x20
MOV RSI, RAX
POP RBX
VMOVUPD YMM8, [RSP]
ADD RSP, 32
VMOVUPD YMM7, [RSP]
ADD RSP, 32
;MOV %2, [%pv]
MOVUPS XMM7, [RSI]
;CAST %pv1, %2
VXORPS YMM8, YMM8, YMM8
VCVTPS2PD YMM8, XMM7
;RET @void
RET

section '.idata' import data readable writeable

library Kernel32,'Kernel32.dll',\
MSVCRT,'MSVCRT.DLL'
import Kernel32,\
  GetLastError,'GetLastError',\
  ExitProcess,'ExitProcess',\
  GetProcessHeap,'GetProcessHeap',\
  HeapAlloc,'HeapAlloc',\
  HeapFree,'HeapFree'
import MSVCRT,\
  printf,'printf'
