Programm
    FunctionDecl: "main" (void)
        ParameterList
        StatementList
            FunctionCall: "type_casting"
    EnumDecl
        EnumElement
        EnumElement
        EnumElement
        EnumElement
    EnumDecl
        EnumElement
        EnumElement
    FunctionDecl: "loops" (void)
        ParameterList
        StatementList
            For
                Immediate: 0 (i64)
                Immediate: 5 (i64)
                Immediate: 1 (i64)
                StatementList
                    VarDecl: "x" (i64)
                        Expression
                            Variable: "i" (i64)
                            Immediate: 1 (i64)
                            BinaryOperator: +
                    If
                        Expression
                            Variable: "x" (i64)
                            Immediate: 2 (i64)
                            BinaryOperator: >
                        StatementList
                            Break
            VarDecl: "a" (i64)
                Immediate: 5 (i64)
            While
                Expression
                    Variable: "a" (i64)
                    Immediate: 0 (i64)
                    BinaryOperator: >
                StatementList
                    Assignment
                        Variable: "a" (i64)
                        Expression
                            Variable: "a" (i64)
                            Immediate: 1 (i64)
                            BinaryOperator: -
                    Break
    FunctionDecl: "enums" (void)
        ParameterList
        StatementList
            VarDecl: "test" (TestType)
                Expression
                    Immediate: 1 (u32)
            Assignment
                Variable: "test" (TestType)
                Expression
                    Immediate: 7 (u32)
            VarDecl: "same" (bool)
                Expression
                    Immediate: 0 (u32)
                    Immediate: 1 (u32)
                    BinaryOperator: ==
    FunctionDecl: "expressions" (void)
        ParameterList
        StatementList
            VarDecl: "a" (i64)
                Expression
                    Immediate: 1 (i64)
                    Immediate: 2 (i64)
                    BinaryOperator: +
            Assignment
                Variable: "a" (i64)
                Expression
                    Immediate: 3 (i64)
                    UnaryOperator: -
                    Immediate: 6 (i64)
                    UnaryOperator: -
                    BinaryOperator: *
                    UnaryOperator: -
    FunctionDecl: "pointers" (void)
        ParameterList
        StatementList
            VarDecl: "p" (i64*)
                NewPointer
            Assignment
                PointerDeref: "p" (i64)
                Immediate: 5 (i64)
            Assignment
                IndexAccess: "p" (i64)
                    Immediate: 2 (i64)
                Immediate: 8 (i64)
            VarDecl: "x" (i64)
                Expression
                    IndexAccess: "p" (i64)
                        Immediate: 0 (i64)
                    Immediate: 7 (i64)
                    BinaryOperator: +
            VarDecl: "y" (i64)
                Expression
                    Variable: "p" (i64*)
                    UnaryOperator: *
                    Immediate: 3 (i64)
                    BinaryOperator: +
            DelPointer
    FunctionDecl: "boolean" (void)
        ParameterList
            Parameter: "p1" (bool)
        StatementList
            VarDecl: "test" (bool)
                Expression
                    Immediate: 5 (i64)
                    Immediate: 3 (i64)
                    BinaryOperator: >=
            Assignment
                Variable: "test" (bool)
                Expression
                    Variable: "test" (bool)
                    Immediate: True (bool)
                    BinaryOperator: &&
                    Variable: "test" (bool)
                    BinaryOperator: ||
            Assignment
                Variable: "test" (bool)
                Expression
                    Variable: "test" (bool)
                    UnaryOperator: !
            VarDecl: "g" (i64)
                Immediate: 5 (i64)
            If
                Expression
                    Immediate: 1 (i64)
                    Immediate: 2 (i64)
                    BinaryOperator: <=
                StatementList
                    Assignment
                        Variable: "g" (i64)
                        Immediate: 2 (i64)
                    VarDecl: "j" (f32)
                        Immediate: 1.0 (f32)
                StatementList
                    Assignment
                        Variable: "g" (i64)
                        Immediate: 7 (i64)
            VarDecl: "x" (bool)
                Expression
                    Immediate: 5 (i64)
                    Immediate: 3 (i64)
                    Immediate: 2 (i64)
                    BinaryOperator: +
                    BinaryOperator: >
            VarDecl: "v1" (vec4f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            VarDecl: "v2" (vec4f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            If
                Expression
                    Variable: "v1" (vec4f)
                    Variable: "v2" (vec4f)
                    BinaryOperator: !=
                StatementList
                    Return
    ExternFunctionDecl: "last_error" (i64) ["GetLastError"; "Kernel32.dll"]
        ParameterList
    FunctionDecl: "fn_calls" (void)
        ParameterList
        StatementList
            VarDecl: "err_code" (i64)
                FunctionCall: "last_error"
            If
                Expression
                    Variable: "err_code" (i64)
                    Immediate: 0 (i64)
                    BinaryOperator: ==
                StatementList
                    Return
            VarDecl: "kx" (i64)
                Expression
                    Immediate: 5 (i64)
                    Immediate: 7 (i64)
                    Immediate: 3 (i64)
                    BinaryOperator: +
                    BinaryOperator: *
            VarDecl: "x6" (vec4d)
                Vector
                    Immediate: 1.0 (f64)
                    Immediate: 2.0 (f64)
                    Immediate: 3.0 (f64)
                    Immediate: 4.0 (f64)
            VarDecl: "k2" (vec4d)
                Expression
                    FunctionCall: "add"
                        Variable: "x6" (vec4d)
                        Variable: "x6" (vec4d)
                    FunctionCall: "add"
                        Variable: "x6" (vec4d)
                        Variable: "x6" (vec4d)
                    BinaryOperator: +
    FunctionDecl: "add" (vec4d)
        ParameterList
            Parameter: "pa" (vec4d)
            Parameter: "pb" (vec4d)
        StatementList
            Return
                Expression
                    Variable: "pa" (vec4d)
                    Variable: "pb" (vec4d)
                    Variable: "pa" (vec4d)
                    BinaryOperator: *
                    BinaryOperator: +
    FunctionDecl: "add2" (i8)
        ParameterList
            Parameter: "pa" (i8)
            Parameter: "pb" (i8)
        StatementList
            Return
                Expression
                    Variable: "pa" (i8)
                    Variable: "pb" (i8)
                    Variable: "pa" (i8)
                    BinaryOperator: *
                    BinaryOperator: +
    FunctionDecl: "add3" (u16)
        ParameterList
            Parameter: "pa" (u16)
            Parameter: "pb" (u16)
        StatementList
            Return
                Expression
                    Variable: "pa" (u16)
                    Variable: "pb" (u16)
                    Variable: "pa" (u16)
                    BinaryOperator: *
                    BinaryOperator: +
    FunctionDecl: "types" (void)
        ParameterList
        StatementList
            VarDecl: "a" (i64)
                Expression
                    Immediate: 5 (i64)
                    Immediate: 6 (i64)
                    BinaryOperator: *
                    Immediate: 7 (i64)
                    Immediate: 8 (i64)
                    BinaryOperator: *
                    BinaryOperator: +
            VarDecl: "b" (f32)
                Immediate: 1.5 (f32)
            VarDecl: "c" (f32)
                Variable: "b" (f32)
            VarDecl: "d" (f64)
                Immediate: 1.2 (f64)
            VarDecl: "e" (f64)
                Immediate: 0.5 (f64)
            VarDecl: "k" (f64)
                Expression
                    Variable: "e" (f64)
                    Variable: "d" (f64)
                    BinaryOperator: *
            Assignment
                Variable: "k" (f64)
                Expression
                    Variable: "k" (f64)
                    Immediate: 2.0 (f64)
                    BinaryOperator: +
            VarDecl: "x3" (vec4f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            VarDecl: "x4" (vec8f)
                Vector
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
                    Immediate: 1.0 (f32)
                    Immediate: 2.0 (f32)
                    Immediate: 3.0 (f32)
                    Immediate: 4.0 (f32)
            VarDecl: "x5" (vec2d)
                Vector
                    Immediate: 1.0 (f64)
                    Immediate: 2.0 (f64)
            VarDecl: "x6" (vec4d)
                Vector
                    Immediate: 1.0 (f64)
                    Immediate: 2.0 (f64)
                    Immediate: 3.0 (f64)
                    Immediate: 4.0 (f64)
            VarDecl: "y" (vec2d)
                Expression
                    Variable: "x5" (vec2d)
                    Variable: "x5" (vec2d)
                    BinaryOperator: +
            VarDecl: "abc" (vec4d)
                Vector
                    Immediate: 1.0 (f64)
                    Expression
                        Variable: "d" (f64)
                        Immediate: 2.0 (f64)
                        BinaryOperator: *
                    Expression
                        Immediate: 2.0 (f64)
                        Variable: "d" (f64)
                        BinaryOperator: *
                        Immediate: 3.0 (f64)
                        BinaryOperator: +
                    Expression
                        Variable: "d" (f64)
                        Immediate: 4.0 (f64)
                        BinaryOperator: /
            VarDecl: "xyz" (vec2d)
                Expression
                    Vector
                        Variable: "d" (f64)
                        Variable: "e" (f64)
                    Vector
                        Variable: "e" (f64)
                        Variable: "d" (f64)
                    BinaryOperator: +
    FunctionDecl: "empty" (void)
        ParameterList
        StatementList
    FunctionDecl: "type_casting" (void)
        ParameterList
        StatementList
            VarDecl: "x" (i32)
                Expression
                    Immediate: 5 (i64)
                    Type: (i32)
                    BinaryOperator: as
            VarDecl: "y1" (i64)
                Expression
                    Variable: "x" (i32)
                    Type: (i64)
                    BinaryOperator: as
            VarDecl: "y2" (i32)
                Expression
                    Variable: "x" (i32)
                    Type: (i32)
                    BinaryOperator: as
            VarDecl: "y3" (i16)
                Expression
                    Variable: "x" (i32)
                    Type: (i16)
                    BinaryOperator: as
            VarDecl: "y4" (i8)
                Expression
                    Variable: "x" (i32)
                    Type: (i8)
                    BinaryOperator: as
            VarDecl: "y5" (u64)
                Expression
                    Variable: "x" (i32)
                    Type: (u64)
                    BinaryOperator: as
            VarDecl: "y6" (u32)
                Expression
                    Variable: "x" (i32)
                    Type: (u32)
                    BinaryOperator: as
            VarDecl: "y7" (u16)
                Expression
                    Variable: "x" (i32)
                    Type: (u16)
                    BinaryOperator: as
            VarDecl: "y8" (u8)
                Expression
                    Variable: "x" (i32)
                    Type: (u8)
                    BinaryOperator: as
            VarDecl: "z1" (f32)
                Expression
                    Variable: "y3" (i16)
                    Type: (f32)
                    BinaryOperator: as
            VarDecl: "z2" (f64)
                Expression
                    Variable: "y3" (i16)
                    Type: (f64)
                    BinaryOperator: as
            VarDecl: "z3" (f32)
                Expression
                    Variable: "y6" (u32)
                    Type: (f32)
                    BinaryOperator: as
            VarDecl: "z4" (f64)
                Expression
                    Variable: "y6" (u32)
                    Type: (f64)
                    BinaryOperator: as
            VarDecl: "z5" (f32)
                Expression
                    Variable: "y5" (u64)
                    Type: (f32)
                    BinaryOperator: as
    ExternFunctionDecl: "erc_exit_process" (void) ["ExitProcess"; "Kernel32.dll"]
        ParameterList
            Parameter: "exit_code" (u32)
    ExternFunctionDecl: "erc_get_process_heap" (void*) ["GetProcessHeap"; "Kernel32.dll"]
        ParameterList
    ExternFunctionDecl: "erc_heap_alloc" (void*) ["HeapAlloc"; "Kernel32.dll"]
        ParameterList
            Parameter: "heap" (void*)
            Parameter: "flags" (u32)
            Parameter: "bytes" (u64)
    ExternFunctionDecl: "erc_heap_free" (bool) ["HeapFree"; "Kernel32.dll"]
        ParameterList
            Parameter: "heap" (void*)
            Parameter: "flags" (u32)
            Parameter: "mem" (void*)



[stack: 0, heap: 0]
[
]
fn main(): void
{
    CALL 'type_casting', 
    RET @void
}

[stack: 0, heap: 0]
[
  %i	: register(RBX),
  %1	: register(RSI),
  %2	: register(RDI),
  %x	: register(RDI),
  %3	: register(R12B),
  %a	: register(RBX),
  %4	: register(SIL),
  i64(0)	: data_section(imm_1),
  i64(1)	: data_section(imm_2),
  i64(5)	: data_section(imm_3),
  i64(2)	: data_section(imm_4),
  bool(1)	: data_section(imm_5),
  bool(0)	: data_section(imm_6),
]
fn loops(): void
{
    MOV %i, i64(0)
    MOV %1, i64(1)
    LABL 'label_1'
    MOV %2, i64(5)
    JMPG %i, %2, 'label_2'
    FREE %2
    ADD %x, %i, i64(1)
    SETG %3, %x, i64(2)
    FREE %x
    JMPNE %3, bool(1), 'label_3'
    FREE %3
    JMP 'label_2'
    LABL 'label_3'
    ADD %i, %i, %1
    FREE %1
    FREE %i
    JMP 'label_1'
    LABL 'label_2'
    MOV %a, i64(5)
    LABL 'label_4'
    SETG %4, %a, i64(0)
    JMPE %4, bool(0), 'label_5'
    FREE %4
    SUB %a, %a, i64(1)
    FREE %a
    JMP 'label_5'
    JMP 'label_4'
    LABL 'label_5'
    RET @void
}

[stack: 0, heap: 0]
[
  %test	: register(EBX),
  %same	: register(BL),
  u32(1)	: data_section(imm_7),
  u32(7)	: data_section(imm_8),
  u32(0)	: data_section(imm_9),
]
fn enums(): void
{
    MOV %test, u32(1)
    MOV %test, u32(7)
    FREE %test
    SETE %same, u32(0), u32(1)
    FREE %same
    RET @void
}

[stack: 0, heap: 0]
[
  %a	: register(RBX),
  %1	: register(RSI),
  %2	: register(RDI),
  %3	: register(R12),
  i64(1)	: data_section(imm_10),
  i64(2)	: data_section(imm_11),
  i64(3)	: data_section(imm_12),
  i64(6)	: data_section(imm_13),
]
fn expressions(): void
{
    ADD %a, i64(1), i64(2)
    NEG %1, i64(3)
    NEG %2, i64(6)
    MUL %3, %1, %2
    FREE %2
    FREE %1
    NEG %a, %3
    FREE %3
    FREE %a
    RET @void
}

[stack: 0, heap: 0]
[
  %1	: register(RBX),
  %p	: register(RSI),
  [%p]	: heap_register(RSI+0),
  %2	: register(RBX),
  [%2]	: heap_register(RBX+0),
  %4	: register(RBX),
  %3	: register(RDI),
  [%4]	: heap_register(RBX+0),
  %x	: register(RBX),
  %5	: register(RBX),
  %y	: register(RDI),
  u64(5)	: data_section(imm_14),
  u64(8)	: data_section(imm_15),
  i64(5)	: data_section(imm_16),
  i64(2)	: data_section(imm_17),
  i64(8)	: data_section(imm_18),
  i64(0)	: data_section(imm_19),
  i64(7)	: data_section(imm_20),
  i64(3)	: data_section(imm_21),
]
fn pointers(): void
{
    MOV %1, u64(5)
    MUL %1, %1, u64(8)
    ALOC %p, %1
    FREE %1
    MOV [%p], i64(5)
    MOV %2, i64(2)
    MUL %2, %2, u64(8)
    ADD %2, %2, %p
    MOV [%2], i64(8)
    FREE %2
    MOV %4, i64(0)
    MUL %4, %4, u64(8)
    ADD %4, %4, %p
    MOV %3, [%4]
    FREE %4
    ADD %x, %3, i64(7)
    FREE %3
    FREE %x
    MOV %5, [%p]
    ADD %y, %5, i64(3)
    FREE %5
    FREE %y
    DEL %p
    FREE %p
    RET @void
}

[stack: 0, heap: 0]
[
  $1	: register(CL),
  %test	: register(BL),
  %1	: register(SIL),
  %g	: register(RBX),
  %2	: register(SIL),
  %j	: register(XMM7),
  %3	: register(RBX),
  %x	: register(SIL),
  %v1	: register(XMM7),
  %v2	: register(XMM8),
  %4	: register(BL),
  i64(5)	: data_section(imm_22),
  i64(3)	: data_section(imm_23),
  bool(1)	: data_section(imm_24),
  i64(1)	: data_section(imm_25),
  i64(2)	: data_section(imm_26),
  f32(1)	: data_section(imm_27),
  i64(7)	: data_section(imm_28),
  f32(2)	: data_section(imm_29),
  f32(3)	: data_section(imm_30),
  f32(4)	: data_section(imm_31),
]
fn boolean(bool): void
{
    SETGE %test, i64(5), i64(3)
    AND %1, %test, bool(1)
    OR %test, %1, %test
    FREE %1
    NOT %test, %test
    FREE %test
    MOV %g, i64(5)
    SETLE %2, i64(1), i64(2)
    JMPNE %2, bool(1), 'label_7'
    FREE %2
    MOV %g, i64(2)
    MOV %j, f32(1)
    FREE %j
    JMP 'label_6'
    LABL 'label_7'
    MOV %g, i64(7)
    FREE %g
    LABL 'label_6'
    ADD %3, i64(3), i64(2)
    SETG %x, i64(5), %3
    FREE %3
    FREE %x
    GVEC %v1, f32(1), f32(2), f32(3), f32(4)
    GVEC %v2, f32(1), f32(2), f32(3), f32(4)
    SETNE %4, %v1, %v2
    FREE %v2
    FREE %v1
    JMPNE %4, bool(1), 'label_8'
    FREE %4
    RET @void
    LABL 'label_8'
    RET @void
}

ext fn['GetLastError', 'Kernel32.dll'] last_error(): i64

[stack: 0, heap: 0]
[
  %err_code	: register(RBX),
  %1	: register(SIL),
  %2	: register(RBX),
  %kx	: register(RSI),
  %x6	: register(YMM7),
  %4	: register(YMM8),
  %5	: register(YMM9),
  %3	: register(YMM10),
  %7	: register(YMM8),
  %8	: register(YMM9),
  %6	: register(YMM7),
  %k2	: register(YMM8),
  i64(0)	: data_section(imm_32),
  bool(1)	: data_section(imm_33),
  i64(7)	: data_section(imm_34),
  i64(3)	: data_section(imm_35),
  i64(5)	: data_section(imm_36),
  f64(1)	: data_section(imm_37),
  f64(2)	: data_section(imm_38),
  f64(3)	: data_section(imm_39),
  f64(4)	: data_section(imm_40),
]
fn fn_calls(): void
{
    CALL 'last_error', %err_code
    SETE %1, %err_code, i64(0)
    FREE %err_code
    JMPNE %1, bool(1), 'label_9'
    FREE %1
    RET @void
    LABL 'label_9'
    ADD %2, i64(7), i64(3)
    MUL %kx, i64(5), %2
    FREE %2
    FREE %kx
    GVEC %x6, f64(1), f64(2), f64(3), f64(4)
    MOV %4, %x6
    MOV %5, %x6
    CALL 'add', %3, %4, %5
    FREE %5
    FREE %4
    MOV %7, %x6
    MOV %8, %x6
    FREE %x6
    CALL 'add', %6, %7, %8
    FREE %8
    FREE %7
    ADD %k2, %3, %6
    FREE %6
    FREE %3
    FREE %k2
    RET @void
}

[stack: 0, heap: 0]
[
  $1	: register(YMM0),
  $2	: register(YMM1),
  %2	: register(YMM7),
  %1	: register(YMM8),
]
fn add(vec4d, vec4d): vec4d
{
    MUL %2, $2, $1
    FREE $2
    ADD %1, $1, %2
    FREE %2
    FREE $1
    RET %1
    FREE %1
}

[stack: 0, heap: 0]
[
  $1	: register(CL),
  $2	: register(DL),
  %2	: register(BL),
  %1	: register(SIL),
]
fn add2(i8, i8): i8
{
    MUL %2, $2, $1
    FREE $2
    ADD %1, $1, %2
    FREE %2
    FREE $1
    RET %1
    FREE %1
}

[stack: 0, heap: 0]
[
  $1	: register(CX),
  $2	: register(DX),
  %2	: register(BX),
  %1	: register(SI),
]
fn add3(u16, u16): u16
{
    MUL %2, $2, $1
    FREE $2
    ADD %1, $1, %2
    FREE %2
    FREE $1
    RET %1
    FREE %1
}

[stack: 0, heap: 0]
[
  %1	: register(RBX),
  %2	: register(RSI),
  %a	: register(RDI),
  %b	: register(XMM7),
  %c	: register(XMM8),
  %d	: register(XMM7),
  %e	: register(XMM8),
  %k	: register(XMM9),
  %x3	: register(XMM9),
  %x4	: register(YMM9),
  %x5	: register(XMM9),
  %x6	: register(YMM10),
  %y	: register(XMM10),
  %3	: register(XMM9),
  %5	: register(XMM10),
  %4	: register(XMM11),
  %6	: register(XMM10),
  %abc	: register(YMM12),
  %7	: register(XMM9),
  %8	: register(XMM10),
  %xyz	: register(XMM7),
  i64(5)	: data_section(imm_41),
  i64(6)	: data_section(imm_42),
  i64(7)	: data_section(imm_43),
  i64(8)	: data_section(imm_44),
  f32(1,5)	: data_section(imm_45),
  f64(1,2)	: data_section(imm_46),
  f64(0,5)	: data_section(imm_47),
  f64(2)	: data_section(imm_48),
  f32(1)	: data_section(imm_49),
  f32(2)	: data_section(imm_50),
  f32(3)	: data_section(imm_51),
  f32(4)	: data_section(imm_52),
  f64(1)	: data_section(imm_53),
  f64(3)	: data_section(imm_54),
  f64(4)	: data_section(imm_55),
]
fn types(): void
{
    MUL %1, i64(5), i64(6)
    MUL %2, i64(7), i64(8)
    ADD %a, %1, %2
    FREE %2
    FREE %1
    FREE %a
    MOV %b, f32(1,5)
    MOV %c, %b
    FREE %b
    FREE %c
    MOV %d, f64(1,2)
    MOV %e, f64(0,5)
    MUL %k, %e, %d
    ADD %k, %k, f64(2)
    FREE %k
    GVEC %x3, f32(1), f32(2), f32(3), f32(4)
    FREE %x3
    GVEC %x4, f32(1), f32(2), f32(3), f32(4), f32(1), f32(2), f32(3), f32(4)
    FREE %x4
    GVEC %x5, f64(1), f64(2)
    GVEC %x6, f64(1), f64(2), f64(3), f64(4)
    FREE %x6
    ADD %y, %x5, %x5
    FREE %x5
    FREE %y
    MUL %3, %d, f64(2)
    MUL %5, f64(2), %d
    ADD %4, %5, f64(3)
    FREE %5
    DIV %6, %d, f64(4)
    GVEC %abc, f64(1), %3, %4, %6
    FREE %6
    FREE %4
    FREE %3
    FREE %abc
    GVEC %7, %d, %e
    GVEC %8, %e, %d
    FREE %d
    FREE %e
    ADD %xyz, %7, %8
    FREE %8
    FREE %7
    FREE %xyz
    RET @void
}

[stack: 0, heap: 0]
[
]
fn empty(): void
{
    RET @void
}

[stack: 0, heap: 0]
[
  %x	: register(EBX),
  %y1	: register(RSI),
  %y2	: register(ESI),
  %y3	: register(SI),
  %y4	: register(DIL),
  %y5	: register(RDI),
  %y6	: register(R12D),
  %y7	: register(R13W),
  %y8	: register(R13B),
  %z1	: register(XMM7),
  %z2	: register(XMM7),
  %z3	: register(XMM7),
  %z4	: register(XMM7),
  %z5	: register(XMM7),
  i64(5)	: data_section(imm_56),
]
fn type_casting(): void
{
    CAST %x, i64(5)
    CAST %y1, %x
    FREE %y1
    MOV %y2, %x
    FREE %y2
    CAST %y3, %x
    CAST %y4, %x
    FREE %y4
    CAST %y5, %x
    CAST %y6, %x
    CAST %y7, %x
    FREE %y7
    CAST %y8, %x
    FREE %x
    FREE %y8
    CAST %z1, %y3
    FREE %z1
    CAST %z2, %y3
    FREE %y3
    FREE %z2
    CAST %z3, %y6
    FREE %z3
    CAST %z4, %y6
    FREE %y6
    FREE %z4
    CAST %z5, %y5
    FREE %y5
    FREE %z5
    RET @void
}

ext fn['ExitProcess', 'Kernel32.dll'] erc_exit_process(u32): void

ext fn['GetProcessHeap', 'Kernel32.dll'] erc_get_process_heap(): void*

ext fn['HeapAlloc', 'Kernel32.dll'] erc_heap_alloc(void*, u32, u64): void*

ext fn['HeapFree', 'Kernel32.dll'] erc_heap_free(void*, u32, void*): bool



format PE64 NX GUI 6.0
entry start
include 'win64a.inc'

section '.data' data readable writeable

imm_1 dq 0
imm_28 dq 7
erc_process_heap dq 0
imm_32 dq 0
imm_34 dq 7
imm_35 dq 3
imm_36 dq 5
imm_37 dq 1.0
imm_38 dq 2.0
imm_39 dq 3.0
imm_40 dq 4.0
imm_41 dq 5
imm_42 dq 6
imm_43 dq 7
imm_44 dq 8
imm_46 dq 1.2
imm_47 dq 0.5
imm_48 dq 2.0
imm_53 dq 1.0
imm_54 dq 3.0
imm_55 dq 4.0
imm_56 dq 5
imm_26 dq 2
imm_25 dq 1
erc_u32_zero dd 0
imm_23 dq 3
imm_2 dq 1
imm_3 dq 5
imm_4 dq 2
imm_10 dq 1
imm_12 dq 3
imm_13 dq 6
imm_14 dq 5
imm_15 dq 8
imm_16 dq 5
imm_11 dq 2
imm_18 dq 8
imm_19 dq 0
imm_20 dq 7
imm_22 dq 5
imm_21 dq 3
imm_17 dq 2
imm_27 dd 1.0
imm_52 dd 4.0
imm_51 dd 3.0
imm_50 dd 2.0
imm_49 dd 1.0
imm_7 dd 1
imm_8 dd 7
imm_45 dd 1.5
imm_9 dd 0
imm_30 dd 3.0
imm_31 dd 4.0
imm_29 dd 2.0
imm_5 db 1
imm_24 db 1
imm_33 db 1
imm_6 db 0

section '.text' code readable executable
start:
call [GetProcessHeap]
mov [erc_process_heap], rax
push rbp
mov rbp, rsp
call fn_main
pop rbp
xor ecx,ecx
call [ExitProcess]

fn_main:
SUB RSP, 0x20
MOV RBP, RSP
CALL fn_type_casting
ADD RSP, 0x20
RET

fn_loops:
MOV RBX, [imm_1]
MOV RSI, [imm_2]
label_1:
MOV RDI, [imm_3]
CMP RBX, RDI
JG label_2
MOV RDI, RBX
ADD RDI, [imm_2]
CMP RDI, [imm_4]
SETG R12B
CMP R12B, [imm_5]
JNE label_3
JMP label_2
label_3:
ADD RBX, RSI
JMP label_1
label_2:
MOV RBX, [imm_3]
label_4:
CMP RBX, [imm_1]
SETG SIL
CMP SIL, [imm_6]
JE label_5
SUB RBX, [imm_2]
JMP label_5
JMP label_4
label_5:
RET

fn_enums:
MOV EBX, [imm_7]
MOV EBX, [imm_8]
MOV EAX, [imm_9]
CMP EAX, [imm_7]
SETE BL
RET

fn_expressions:
MOV RBX, [imm_10]
ADD RBX, [imm_11]
XOR RSI, RSI
SUB RSI, [imm_12]
XOR RDI, RDI
SUB RDI, [imm_13]
MOV RAX, RSI
IMUL RDI
MOV R12, RAX
XOR RBX, RBX
SUB RBX, R12
RET

fn_pointers:
MOV RBX, [imm_14]
MOV RAX, RBX
MUL [imm_15]
MOV RBX, RAX
PUSH RBX
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RBX
SUB RSP, 0x20
MOV RBP, RSP
CALL [HeapAlloc]
ADD RSP, 0x20
MOV RSI, RAX
POP RBX
MOV RAX, [imm_16]
MOV [RSI], RAX
MOV RBX, [imm_17]
MOV RAX, RBX
MUL [imm_15]
MOV RBX, RAX
ADD RBX, RSI
MOV RAX, [imm_18]
MOV [RBX], RAX
MOV RBX, [imm_19]
MOV RAX, RBX
MUL [imm_15]
MOV RBX, RAX
ADD RBX, RSI
MOV RDI, [RBX]
MOV RBX, RDI
ADD RBX, [imm_20]
MOV RBX, [RSI]
MOV RDI, RBX
ADD RDI, [imm_21]
PUSH RSI
PUSH RBX
PUSH RDI
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, RSI
SUB RSP, 0x20
MOV RBP, RSP
CALL [HeapFree]
ADD RSP, 0x20
POP RDI
POP RBX
POP RSI
RET

fn_boolean:
MOV RAX, [imm_22]
CMP RAX, [imm_23]
SETGE BL
MOV SIL, BL
AND SIL, [imm_24]
MOV BL, SIL
OR BL, BL
NOT BL
MOV RBX, [imm_22]
MOV RAX, [imm_25]
CMP RAX, [imm_26]
SETLE SIL
CMP SIL, [imm_24]
JNE label_7
MOV RBX, [imm_26]
MOVSS XMM7, [imm_27]
JMP label_6
label_7:
MOV RBX, [imm_28]
label_6:
MOV RBX, [imm_23]
ADD RBX, [imm_26]
CMP [imm_22], RBX
SETG SIL
MOV RSI, RSP
AND RSP, -16
MOVSS XMM4, [imm_27]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_29]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_30]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_31]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVUPS XMM7, [RSP]
MOV RSP, RSI
MOV RSI, RSP
AND RSP, -16
MOVSS XMM4, [imm_27]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_29]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_30]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_31]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVUPS XMM8, [RSP]
MOV RSP, RSI
MOVAPS XMM4, XMM7
CMPEQPS XMM4, XMM8
MOVMSKPS EAX, XMM4
CMP EAX, 0xF
SETE BL
CMP BL, [imm_24]
JNE label_8
RET
label_8:
RET

fn_fn_calls:
SUB RSP, 0x20
MOV RBP, RSP
CALL [GetLastError]
ADD RSP, 0x20
MOV RBX, RAX
CMP RBX, [imm_32]
SETE SIL
CMP SIL, [imm_33]
JNE label_9
RET
label_9:
MOV RBX, [imm_34]
ADD RBX, [imm_35]
MOV RAX, [imm_36]
IMUL RBX
MOV RSI, RAX
MOV RSI, RSP
AND RSP, -32
MOVSD XMM4, [imm_37]
SUB RSP, 8
MOVSD [RSP], XMM4
MOVSD XMM4, [imm_38]
SUB RSP, 8
MOVSD [RSP], XMM4
MOVSD XMM4, [imm_39]
SUB RSP, 8
MOVSD [RSP], XMM4
MOVSD XMM4, [imm_40]
SUB RSP, 8
MOVSD [RSP], XMM4
VMOVUPD YMM7, [RSP]
MOV RSP, RSI
VMOVAPD YMM8, YMM7
VMOVAPD YMM9, YMM7
SUB RSP, 1
MOV [RSP], SIL
PUSH RBX
PUSH RSI
SUB RSP, 32
VMOVUPD [RSP], YMM7
SUB RSP, 32
VMOVUPD [RSP], YMM8
SUB RSP, 32
VMOVUPD [RSP], YMM9
VMOVAPD YMM0, YMM8
VMOVAPD YMM1, YMM9
SUB RSP, 0x20
MOV RBP, RSP
CALL fn_add
ADD RSP, 0x20
VMOVAPD YMM10, YMM0
VMOVUPD YMM9, [RSP]
ADD RSP, 32
VMOVUPD YMM8, [RSP]
ADD RSP, 32
VMOVUPD YMM7, [RSP]
ADD RSP, 32
POP RSI
POP RBX
MOV SIL, [RSP]
ADD RSP, 1
VMOVAPD YMM8, YMM7
VMOVAPD YMM9, YMM7
SUB RSP, 1
MOV [RSP], SIL
PUSH RBX
PUSH RSI
SUB RSP, 32
VMOVUPD [RSP], YMM10
SUB RSP, 32
VMOVUPD [RSP], YMM9
SUB RSP, 32
VMOVUPD [RSP], YMM8
SUB RSP, 32
VMOVUPD [RSP], YMM7
VMOVAPD YMM0, YMM8
VMOVAPD YMM1, YMM9
SUB RSP, 0x20
MOV RBP, RSP
CALL fn_add
ADD RSP, 0x20
VMOVAPD YMM7, YMM0
VMOVUPD YMM7, [RSP]
ADD RSP, 32
VMOVUPD YMM8, [RSP]
ADD RSP, 32
VMOVUPD YMM9, [RSP]
ADD RSP, 32
VMOVUPD YMM10, [RSP]
ADD RSP, 32
POP RSI
POP RBX
MOV SIL, [RSP]
ADD RSP, 1
VADDPD YMM8, YMM10, YMM7
RET

fn_add:
VMULPD YMM7, YMM1, YMM0
VADDPD YMM8, YMM0, YMM7
VMOVAPD YMM0, YMM8
RET

fn_add2:
MOV AL, DL
IMUL CL
MOV BL, AL
MOV SIL, CL
ADD SIL, BL
MOV AL, SIL
RET

fn_add3:
MOV AX, DX
MUL CX
MOV BX, AX
MOV SI, CX
ADD SI, BX
MOV AX, SI
RET

fn_types:
MOV RAX, [imm_41]
IMUL [imm_42]
MOV RBX, RAX
MOV RAX, [imm_43]
IMUL [imm_44]
MOV RSI, RAX
MOV RDI, RBX
ADD RDI, RSI
MOVSS XMM7, [imm_45]
MOVSS XMM8, XMM7
MOVSD XMM7, [imm_46]
MOVSD XMM8, [imm_47]
MOVSD XMM9, XMM8
MULSD XMM9, XMM7
ADDSD XMM9, [imm_48]
MOV RSI, RSP
AND RSP, -16
MOVSS XMM4, [imm_49]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_50]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_51]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_52]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVUPS XMM9, [RSP]
MOV RSP, RSI
MOV RSI, RSP
AND RSP, -32
MOVSS XMM4, [imm_49]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_50]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_51]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_52]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_49]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_50]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_51]
SUB RSP, 4
MOVSS [RSP], XMM4
MOVSS XMM4, [imm_52]
SUB RSP, 4
MOVSS [RSP], XMM4
VMOVUPS YMM9, [RSP]
MOV RSP, RSI
MOV RSI, RSP
AND RSP, -16
MOVSD XMM4, [imm_53]
SUB RSP, 8
MOVSD [RSP], XMM4
MOVSD XMM4, [imm_48]
SUB RSP, 8
MOVSD [RSP], XMM4
MOVUPD XMM9, [RSP]
MOV RSP, RSI
MOV RSI, RSP
AND RSP, -32
MOVSD XMM4, [imm_53]
SUB RSP, 8
MOVSD [RSP], XMM4
MOVSD XMM4, [imm_48]
SUB RSP, 8
MOVSD [RSP], XMM4
MOVSD XMM4, [imm_54]
SUB RSP, 8
MOVSD [RSP], XMM4
MOVSD XMM4, [imm_55]
SUB RSP, 8
MOVSD [RSP], XMM4
VMOVUPD YMM10, [RSP]
MOV RSP, RSI
MOVAPD XMM10, XMM9
ADDPD XMM10, XMM9
MOVSD XMM9, XMM7
MULSD XMM9, [imm_48]
MOVSD XMM10, [imm_48]
MULSD XMM10, XMM7
MOVSD XMM11, XMM10
ADDSD XMM11, [imm_54]
MOVSD XMM10, XMM7
DIVSD XMM10, [imm_55]
MOV RSI, RSP
AND RSP, -32
MOVSD XMM4, [imm_53]
SUB RSP, 8
MOVSD [RSP], XMM4
SUB RSP, 8
MOVSD [RSP], XMM9
SUB RSP, 8
MOVSD [RSP], XMM11
SUB RSP, 8
MOVSD [RSP], XMM10
VMOVUPD YMM12, [RSP]
MOV RSP, RSI
MOV RSI, RSP
AND RSP, -16
SUB RSP, 8
MOVSD [RSP], XMM7
SUB RSP, 8
MOVSD [RSP], XMM8
MOVUPD XMM9, [RSP]
MOV RSP, RSI
MOV RSI, RSP
AND RSP, -16
SUB RSP, 8
MOVSD [RSP], XMM8
SUB RSP, 8
MOVSD [RSP], XMM7
MOVUPD XMM10, [RSP]
MOV RSP, RSI
MOVAPD XMM7, XMM9
ADDPD XMM7, XMM10
RET

fn_empty:
RET

fn_type_casting:
MOV EBX, dword [imm_56]
MOVSXD RSI, EBX
MOV ESI, EBX
MOV SI, BX
MOV DIL, BL
MOV EDI, EBX
MOV R12D, EBX
MOV R13W, BX
MOV R13B, BL
MOVSX EAX, SI
MOVD XMM7, EAX
CVTDQ2PS XMM7, XMM7
MOVSX EAX, SI
MOVD XMM7, EAX
CVTDQ2PD XMM7, XMM7
MOV EAX, R12D
XORPS XMM7, XMM7
CVTSI2SS XMM7, RAX
MOV EAX, R12D
XORPS XMM7, XMM7
CVTSI2SD XMM7, RAX
XORPS XMM7, XMM7
MOV RAX, RDI
TEST RAX, RAX
JS u64tof_1
CVTSI2SS XMM7, RAX
JMP u64tof_2
u64tof_1:
MOV R10, RAX
AND R10, 1
SHR RAX, 1
OR RAX, R10
CVTSI2SS XMM7, RAX
ADDSS XMM7, XMM7
u64tof_2:
RET

section '.idata' import data readable writeable

library Kernel32,'Kernel32.dll'
import Kernel32,\
  GetLastError,'GetLastError',\
  ExitProcess,'ExitProcess',\
  GetProcessHeap,'GetProcessHeap',\
  HeapAlloc,'HeapAlloc',\
  HeapFree,'HeapFree'
