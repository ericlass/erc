
fn main() {
	type_casting();
}

enum TestType {
	None,
	Some,
	Never = 7,
	Ultimate = 8
}

enum TestType2 {
	Some,
	Ding
}

fn loops() {
	for i in 0 to 5 inc 1 {
		let x = i + 1;
		if x > 2 {
			break;
		}
	}
	let a = 5;
	while a > 0 {
		a = a - 1;
		break;
	}
}

fn enums() {
	let test = TestType::Some;
	test = TestType::Never;

	let same = TestType::None == TestType::Some;
}

fn expressions() {
	//Testing single line comment
	
	/* Multi
	line
	comment */

	let a = 1 + 2;
	a = -(-3 * -6);
}

fn pointers() {
	let p = new i64(5);

	*p = 5;
	p[2] = 8;

	let x = p[0] + 7;
	let y = *p + 3;

	del p;
}

fn boolean(p1: bool) {
	let test = 5 >= 3;
	test = test && true || test;
	test = !test;
	let g = 5;
	if 1 <= 2 {
		g = 2;
		let j = 1.0f;
	}
	else {
		g = 7;
	}

	let x = 5 > 3 + 2;

	let v1 = vec(1.0f, 2.0f, 3.0f, 4.0f);
	let v2 = vec(1.0f, 2.0f, 3.0f, 4.0f);
	if v1 != v2 {
		ret;
	}
}

fn ext("GetLastError", "Kernel32.dll") last_error(): i64;

fn fn_calls() {
	let err_code = last_error();
	if err_code == 0 {
		ret;
	}
	let kx = 5 * (7 + 3);
	let x6 = vec(1.0, 2.0, 3.0, 4.0);
	let k2 = add(x6, x6) + add(x6, x6);
}

fn add (pa: vec4d, pb: vec4d): vec4d {
	ret pa + pb * pa;
}

fn add2 (pa: i8, pb: i8): i8 {
	ret pa + pb * pa;
}

fn add3 (pa: u16, pb: u16): u16 {
	ret pa + pb * pa;
}

fn types()
{
	let a = 5*6+7*8;
	 let b = 1.5f ;
	let c=b;
	let d = 1.2;
	let e = 0.5d;

	let k = e * d;
	k = k + 2.0;

	let x3 = vec(1.0f, 2.0f, 3.0f, 4.0f);
	let x4 = vec(1.0f, 2.0f, 3.0f, 4.0f, 1.0f, 2.0f, 3.0f, 4.0f);

	let x5 = vec2d(1.0, 2.0);
	let x6 = vec(1.0, 2.0, 3.0, 4.0);

	let y = x5 + x5;

	let abc = vec(1.0, d * 2.0, (2.0 * d) + 3.0, d / 4.0);

	let xyz = vec(d, e) + vec(e, d);
}

fn empty() {}

fn type_casting()
{
	let x = 5 as i32;

	let y1 = x as i64;
	let y2 = x as i32;
	let y3 = x as i16;
	let y4 = x as i8;

	let y5 = x as u64;
	let y6 = x as u32;
	let y7 = x as u16;
	let y8 = x as u8;

	let z1 = y3 as f32;
	let z2 = y3 as f64;
	let z3 = y6 as f32;
	let z4 = y6 as f64;
	let z5 = y5 as f32;
}