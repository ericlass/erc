Programm
    FunctionDecl: "main" (void)
        ParameterList
        StatementList
            FunctionCall: "test_arithmetic_u8"
            FunctionCall: "print_separator"
            FunctionCall: "test_arithmetic_u16"
            FunctionCall: "print_separator"
            FunctionCall: "test_arithmetic_u32"
            FunctionCall: "print_separator"
            FunctionCall: "test_arithmetic_u64"
            FunctionCall: "print_separator"
            FunctionCall: "test_arithmetic_i8"
            FunctionCall: "print_separator"
            FunctionCall: "test_arithmetic_i16"
            FunctionCall: "print_separator"
            FunctionCall: "test_arithmetic_i32"
            FunctionCall: "print_separator"
            FunctionCall: "test_arithmetic_i64"
            FunctionCall: "print_separator"
            FunctionCall: "test_string"
    FunctionDecl: "print_separator" (void)
        ParameterList
        StatementList
            FunctionCall: "printf"
                Expression
                    Immediate: "######################\n" (string8)
                    UnaryOperator: &
    FunctionDecl: "test_arithmetic_u8" (void)
        ParameterList
        StatementList
            VarDecl: "message" (char8*)
                Expression
                    Immediate: "test_arithmetic_u8(%d): %d \n" (string8)
                    UnaryOperator: &
            VarDecl: "a" (u8)
                Immediate: 5 (u8)
            VarDecl: "b" (u8)
                Immediate: 12 (u8)
            VarDecl: "x" (u8)
                Expression
                    Variable: "a" (u8)
                    Variable: "b" (u8)
                    BinaryOperator: +
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 1 (u32)
                Expression
                    Variable: "x" (u8)
                    Type: (u32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (u8)
                Expression
                    Variable: "b" (u8)
                    Variable: "a" (u8)
                    BinaryOperator: -
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 2 (u32)
                Expression
                    Variable: "x" (u8)
                    Type: (u32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (u8)
                Expression
                    Variable: "a" (u8)
                    Variable: "b" (u8)
                    BinaryOperator: *
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 3 (u32)
                Expression
                    Variable: "x" (u8)
                    Type: (u32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (u8)
                Expression
                    Variable: "b" (u8)
                    Variable: "a" (u8)
                    BinaryOperator: /
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 4 (u32)
                Expression
                    Variable: "x" (u8)
                    Type: (u32)
                    BinaryOperator: as
    FunctionDecl: "test_arithmetic_u16" (void)
        ParameterList
        StatementList
            VarDecl: "message" (char8*)
                Expression
                    Immediate: "test_arithmetic_u16(%d): %d \n" (string8)
                    UnaryOperator: &
            VarDecl: "a" (u16)
                Immediate: 5 (u16)
            VarDecl: "b" (u16)
                Immediate: 12 (u16)
            VarDecl: "x" (u16)
                Expression
                    Variable: "a" (u16)
                    Variable: "b" (u16)
                    BinaryOperator: +
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 1 (u32)
                Expression
                    Variable: "x" (u16)
                    Type: (u32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (u16)
                Expression
                    Variable: "b" (u16)
                    Variable: "a" (u16)
                    BinaryOperator: -
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 2 (u32)
                Expression
                    Variable: "x" (u16)
                    Type: (u32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (u16)
                Expression
                    Variable: "a" (u16)
                    Variable: "b" (u16)
                    BinaryOperator: *
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 3 (u32)
                Expression
                    Variable: "x" (u16)
                    Type: (u32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (u16)
                Expression
                    Variable: "b" (u16)
                    Variable: "a" (u16)
                    BinaryOperator: /
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 4 (u32)
                Expression
                    Variable: "x" (u16)
                    Type: (u32)
                    BinaryOperator: as
    FunctionDecl: "test_arithmetic_u32" (void)
        ParameterList
        StatementList
            VarDecl: "message" (char8*)
                Expression
                    Immediate: "test_arithmetic_u32(%d): %d \n" (string8)
                    UnaryOperator: &
            VarDecl: "a" (u32)
                Immediate: 5 (u32)
            VarDecl: "b" (u32)
                Immediate: 12 (u32)
            VarDecl: "x" (u32)
                Expression
                    Variable: "a" (u32)
                    Variable: "b" (u32)
                    BinaryOperator: +
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 1 (u32)
                Variable: "x" (u32)
            Assignment
                Variable: "x" (u32)
                Expression
                    Variable: "b" (u32)
                    Variable: "a" (u32)
                    BinaryOperator: -
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 2 (u32)
                Variable: "x" (u32)
            Assignment
                Variable: "x" (u32)
                Expression
                    Variable: "a" (u32)
                    Variable: "b" (u32)
                    BinaryOperator: *
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 3 (u32)
                Variable: "x" (u32)
            Assignment
                Variable: "x" (u32)
                Expression
                    Variable: "b" (u32)
                    Variable: "a" (u32)
                    BinaryOperator: /
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 4 (u32)
                Variable: "x" (u32)
    FunctionDecl: "test_arithmetic_u64" (void)
        ParameterList
        StatementList
            VarDecl: "message" (char8*)
                Expression
                    Immediate: "test_arithmetic_u64(%d): %lld \n" (string8)
                    UnaryOperator: &
            VarDecl: "a" (u64)
                Immediate: 5 (u64)
            VarDecl: "b" (u64)
                Immediate: 12 (u64)
            VarDecl: "x" (u64)
                Expression
                    Variable: "a" (u64)
                    Variable: "b" (u64)
                    BinaryOperator: +
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 1 (u32)
                Variable: "x" (u64)
            Assignment
                Variable: "x" (u64)
                Expression
                    Variable: "b" (u64)
                    Variable: "a" (u64)
                    BinaryOperator: -
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 2 (u32)
                Variable: "x" (u64)
            Assignment
                Variable: "x" (u64)
                Expression
                    Variable: "a" (u64)
                    Variable: "b" (u64)
                    BinaryOperator: *
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 3 (u32)
                Variable: "x" (u64)
            Assignment
                Variable: "x" (u64)
                Expression
                    Variable: "b" (u64)
                    Variable: "a" (u64)
                    BinaryOperator: /
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 4 (u32)
                Variable: "x" (u64)
    FunctionDecl: "test_arithmetic_i8" (void)
        ParameterList
        StatementList
            VarDecl: "message" (char8*)
                Expression
                    Immediate: "test_arithmetic_i8(%d): %i \n" (string8)
                    UnaryOperator: &
            VarDecl: "a" (i8)
                Immediate: 5 (i8)
            VarDecl: "b" (i8)
                Expression
                    Immediate: 12 (i8)
                    UnaryOperator: -
            VarDecl: "x" (i8)
                Expression
                    Variable: "a" (i8)
                    Variable: "b" (i8)
                    BinaryOperator: +
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 1 (u32)
                Expression
                    Variable: "x" (i8)
                    Type: (i32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (i8)
                Expression
                    Variable: "b" (i8)
                    Variable: "a" (i8)
                    BinaryOperator: -
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 2 (u32)
                Expression
                    Variable: "x" (i8)
                    Type: (i32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (i8)
                Expression
                    Variable: "a" (i8)
                    Variable: "b" (i8)
                    BinaryOperator: *
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 3 (u32)
                Expression
                    Variable: "x" (i8)
                    Type: (i32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (i8)
                Expression
                    Variable: "b" (i8)
                    Variable: "a" (i8)
                    BinaryOperator: /
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 4 (u32)
                Expression
                    Variable: "x" (i8)
                    Type: (i32)
                    BinaryOperator: as
    FunctionDecl: "test_arithmetic_i16" (void)
        ParameterList
        StatementList
            VarDecl: "message" (char8*)
                Expression
                    Immediate: "test_arithmetic_i16(%d): %i \n" (string8)
                    UnaryOperator: &
            VarDecl: "a" (i16)
                Immediate: 5 (i16)
            VarDecl: "b" (i16)
                Expression
                    Immediate: 12 (i16)
                    UnaryOperator: -
            VarDecl: "x" (i16)
                Expression
                    Variable: "a" (i16)
                    Variable: "b" (i16)
                    BinaryOperator: +
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 1 (u32)
                Expression
                    Variable: "x" (i16)
                    Type: (i32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (i16)
                Expression
                    Variable: "b" (i16)
                    Variable: "a" (i16)
                    BinaryOperator: -
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 2 (u32)
                Expression
                    Variable: "x" (i16)
                    Type: (i32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (i16)
                Expression
                    Variable: "a" (i16)
                    Variable: "b" (i16)
                    BinaryOperator: *
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 3 (u32)
                Expression
                    Variable: "x" (i16)
                    Type: (i32)
                    BinaryOperator: as
            Assignment
                Variable: "x" (i16)
                Expression
                    Variable: "b" (i16)
                    Variable: "a" (i16)
                    BinaryOperator: /
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 4 (u32)
                Expression
                    Variable: "x" (i16)
                    Type: (i32)
                    BinaryOperator: as
    FunctionDecl: "test_arithmetic_i32" (void)
        ParameterList
        StatementList
            VarDecl: "message" (char8*)
                Expression
                    Immediate: "test_arithmetic_i32(%d): %i \n" (string8)
                    UnaryOperator: &
            VarDecl: "a" (i32)
                Immediate: 5 (i32)
            VarDecl: "b" (i32)
                Expression
                    Immediate: 12 (i32)
                    UnaryOperator: -
            VarDecl: "x" (i32)
                Expression
                    Variable: "a" (i32)
                    Variable: "b" (i32)
                    BinaryOperator: +
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 1 (u32)
                Variable: "x" (i32)
            Assignment
                Variable: "x" (i32)
                Expression
                    Variable: "b" (i32)
                    Variable: "a" (i32)
                    BinaryOperator: -
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 2 (u32)
                Variable: "x" (i32)
            Assignment
                Variable: "x" (i32)
                Expression
                    Variable: "a" (i32)
                    Variable: "b" (i32)
                    BinaryOperator: *
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 3 (u32)
                Variable: "x" (i32)
            Assignment
                Variable: "x" (i32)
                Expression
                    Variable: "b" (i32)
                    Variable: "a" (i32)
                    BinaryOperator: /
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 4 (u32)
                Variable: "x" (i32)
    FunctionDecl: "test_arithmetic_i64" (void)
        ParameterList
        StatementList
            VarDecl: "message" (char8*)
                Expression
                    Immediate: "test_arithmetic_i64(%d): %lli \n" (string8)
                    UnaryOperator: &
            VarDecl: "a" (i64)
                Immediate: 5 (i64)
            VarDecl: "b" (i64)
                Expression
                    Immediate: 12 (i64)
                    UnaryOperator: -
            VarDecl: "x" (i64)
                Expression
                    Variable: "a" (i64)
                    Variable: "b" (i64)
                    BinaryOperator: +
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 1 (u32)
                Variable: "x" (i64)
            Assignment
                Variable: "x" (i64)
                Expression
                    Variable: "b" (i64)
                    Variable: "a" (i64)
                    BinaryOperator: -
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 2 (u32)
                Variable: "x" (i64)
            Assignment
                Variable: "x" (i64)
                Expression
                    Variable: "a" (i64)
                    Variable: "b" (i64)
                    BinaryOperator: *
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 3 (u32)
                Variable: "x" (i64)
            Assignment
                Variable: "x" (i64)
                Expression
                    Variable: "b" (i64)
                    Variable: "a" (i64)
                    BinaryOperator: /
            FunctionCall: "printf"
                Variable: "message" (char8*)
                Immediate: 4 (u32)
                Variable: "x" (i64)
    FunctionDecl: "test_string" (void)
        ParameterList
        StatementList
            VarDecl: "s" (string8)
                Immediate: "Hello World!" (string8)
            VarDecl: "c" (char8)
                IndexAccess: "s" (char8)
                    Immediate: 6 (i64)
            FunctionCall: "printf"
                Expression
                    Immediate: "test_string(1): %c\n" (string8)
                    UnaryOperator: &
                Variable: "c" (char8)
            VarDecl: "l" (u64)
                Expression
                    Variable: "s" (string8)
                    UnaryOperator: #
            FunctionCall: "printf"
                Expression
                    Immediate: "test_string(2): %lld\n" (string8)
                    UnaryOperator: &
                Variable: "l" (u64)
            VarDecl: "s2" (string8)
                Expression
                    Immediate: "abc" (string8)
                    Immediate: "defg" (string8)
                    BinaryOperator: +
            Assignment
                Variable: "l" (u64)
                Expression
                    Variable: "s2" (string8)
                    UnaryOperator: #
            FunctionCall: "printf"
                Expression
                    Immediate: "test_string(2): %lld\n" (string8)
                    UnaryOperator: &
                Variable: "l" (u64)
            DelPointer
    FunctionDecl: "test_arrays" (void)
        ParameterList
        StatementList
    FunctionDecl: "test_casting" (void)
        ParameterList
        StatementList
    ExternFunctionDecl: "erc_exit_process" (void) ["ExitProcess"; "Kernel32.dll"]
        ParameterList
            Parameter: "exit_code" (u32)
    ExternFunctionDecl: "erc_get_process_heap" (void*) ["GetProcessHeap"; "Kernel32.dll"]
        ParameterList
    ExternFunctionDecl: "erc_heap_alloc" (void*) ["HeapAlloc"; "Kernel32.dll"]
        ParameterList
            Parameter: "heap" (void*)
            Parameter: "flags" (u32)
            Parameter: "bytes" (u64)
    ExternFunctionDecl: "erc_heap_free" (bool) ["HeapFree"; "Kernel32.dll"]
        ParameterList
            Parameter: "heap" (void*)
            Parameter: "flags" (u32)
            Parameter: "mem" (void*)
    ExternFunctionDecl: "printf" (i32) ["printf"; "MSVCRT.DLL"]
        ParameterList
            Parameter: "format" (char8*)
            Parameter: "arguments" (vars)



[stack: 0]
[
]
fn main(): void
{
    CALL 'test_arithmetic_u8', 
    CALL 'print_separator', 
    CALL 'test_arithmetic_u16', 
    CALL 'print_separator', 
    CALL 'test_arithmetic_u32', 
    CALL 'print_separator', 
    CALL 'test_arithmetic_u64', 
    CALL 'print_separator', 
    CALL 'test_arithmetic_i8', 
    CALL 'print_separator', 
    CALL 'test_arithmetic_i16', 
    CALL 'print_separator', 
    CALL 'test_arithmetic_i32', 
    CALL 'print_separator', 
    CALL 'test_arithmetic_i64', 
    CALL 'print_separator', 
    CALL 'test_string', 
    RET @void
}

[stack: 0]
[
  %2	: register(RBX),
  %1	: register(RSI),
  string8("######################\n")	: data_section(imm_1),
  u64(8)	: data_section(imm_2),
]
fn print_separator(): void
{
    LEA %2, string8("######################\n")
    MOV %1, %2
    FREE %2
    ADD %1, %1, u64(8)
    CALL 'printf', , %1
    FREE %1
    RET @void
}

[stack: 0]
[
  %1	: register(RBX),
  %message	: register(RSI),
  %a	: register(BL),
  %b	: register(DIL),
  %x	: register(R12B),
  %2	: register(R13D),
  %3	: register(R13D),
  %4	: register(R13D),
  %5	: register(EBX),
  string8("test_arithmetic_u8(%d): %d \n")	: data_section(imm_3),
  u64(8)	: data_section(imm_4),
  u8(5)	: data_section(imm_5),
  u8(12)	: data_section(imm_6),
  u32(1)	: data_section(imm_7),
  u32(2)	: data_section(imm_8),
  u32(3)	: data_section(imm_9),
  u32(4)	: data_section(imm_10),
]
fn test_arithmetic_u8(): void
{
    LEA %1, string8("test_arithmetic_u8(%d): %d \n")
    MOV %message, %1
    FREE %1
    ADD %message, %message, u64(8)
    MOV %a, u8(5)
    MOV %b, u8(12)
    ADD %x, %a, %b
    CAST %2, %x
    CALL 'printf', , %message, u32(1), %2
    FREE %2
    SUB %x, %b, %a
    CAST %3, %x
    CALL 'printf', , %message, u32(2), %3
    FREE %3
    MUL %x, %a, %b
    CAST %4, %x
    CALL 'printf', , %message, u32(3), %4
    FREE %4
    DIV %x, %b, %a
    FREE %a
    FREE %b
    CAST %5, %x
    FREE %x
    CALL 'printf', , %message, u32(4), %5
    FREE %5
    FREE %message
    RET @void
}

[stack: 0]
[
  %1	: register(RBX),
  %message	: register(RSI),
  %a	: register(BX),
  %b	: register(DI),
  %x	: register(R12W),
  %2	: register(R13D),
  %3	: register(R13D),
  %4	: register(R13D),
  %5	: register(EBX),
  string8("test_arithmetic_u16(%d): %d \n")	: data_section(imm_11),
  u64(8)	: data_section(imm_12),
  u16(5)	: data_section(imm_13),
  u16(12)	: data_section(imm_14),
  u32(1)	: data_section(imm_15),
  u32(2)	: data_section(imm_16),
  u32(3)	: data_section(imm_17),
  u32(4)	: data_section(imm_18),
]
fn test_arithmetic_u16(): void
{
    LEA %1, string8("test_arithmetic_u16(%d): %d \n")
    MOV %message, %1
    FREE %1
    ADD %message, %message, u64(8)
    MOV %a, u16(5)
    MOV %b, u16(12)
    ADD %x, %a, %b
    CAST %2, %x
    CALL 'printf', , %message, u32(1), %2
    FREE %2
    SUB %x, %b, %a
    CAST %3, %x
    CALL 'printf', , %message, u32(2), %3
    FREE %3
    MUL %x, %a, %b
    CAST %4, %x
    CALL 'printf', , %message, u32(3), %4
    FREE %4
    DIV %x, %b, %a
    FREE %a
    FREE %b
    CAST %5, %x
    FREE %x
    CALL 'printf', , %message, u32(4), %5
    FREE %5
    FREE %message
    RET @void
}

[stack: 0]
[
  %1	: register(RBX),
  %message	: register(RSI),
  %a	: register(EBX),
  %b	: register(EDI),
  %x	: register(R12D),
  string8("test_arithmetic_u32(%d): %d \n")	: data_section(imm_19),
  u64(8)	: data_section(imm_20),
  u32(5)	: data_section(imm_21),
  u32(12)	: data_section(imm_22),
  u32(1)	: data_section(imm_23),
  u32(2)	: data_section(imm_24),
  u32(3)	: data_section(imm_25),
  u32(4)	: data_section(imm_26),
]
fn test_arithmetic_u32(): void
{
    LEA %1, string8("test_arithmetic_u32(%d): %d \n")
    MOV %message, %1
    FREE %1
    ADD %message, %message, u64(8)
    MOV %a, u32(5)
    MOV %b, u32(12)
    ADD %x, %a, %b
    CALL 'printf', , %message, u32(1), %x
    SUB %x, %b, %a
    CALL 'printf', , %message, u32(2), %x
    MUL %x, %a, %b
    CALL 'printf', , %message, u32(3), %x
    DIV %x, %b, %a
    FREE %a
    FREE %b
    CALL 'printf', , %message, u32(4), %x
    FREE %x
    FREE %message
    RET @void
}

[stack: 0]
[
  %1	: register(RBX),
  %message	: register(RSI),
  %a	: register(RBX),
  %b	: register(RDI),
  %x	: register(R12),
  string8("test_arithmetic_u64(%d): %lld \n")	: data_section(imm_27),
  u64(8)	: data_section(imm_28),
  u64(5)	: data_section(imm_29),
  u64(12)	: data_section(imm_30),
  u32(1)	: data_section(imm_31),
  u32(2)	: data_section(imm_32),
  u32(3)	: data_section(imm_33),
  u32(4)	: data_section(imm_34),
]
fn test_arithmetic_u64(): void
{
    LEA %1, string8("test_arithmetic_u64(%d): %lld \n")
    MOV %message, %1
    FREE %1
    ADD %message, %message, u64(8)
    MOV %a, u64(5)
    MOV %b, u64(12)
    ADD %x, %a, %b
    CALL 'printf', , %message, u32(1), %x
    SUB %x, %b, %a
    CALL 'printf', , %message, u32(2), %x
    MUL %x, %a, %b
    CALL 'printf', , %message, u32(3), %x
    DIV %x, %b, %a
    FREE %a
    FREE %b
    CALL 'printf', , %message, u32(4), %x
    FREE %x
    FREE %message
    RET @void
}

[stack: 0]
[
  %1	: register(RBX),
  %message	: register(RSI),
  %a	: register(BL),
  %b	: register(DIL),
  %x	: register(R12B),
  %2	: register(R13D),
  %3	: register(R13D),
  %4	: register(R13D),
  %5	: register(EBX),
  string8("test_arithmetic_i8(%d): %i \n")	: data_section(imm_35),
  u64(8)	: data_section(imm_36),
  i8(5)	: data_section(imm_37),
  i8(12)	: data_section(imm_38),
  u32(1)	: data_section(imm_39),
  u32(2)	: data_section(imm_40),
  u32(3)	: data_section(imm_41),
  u32(4)	: data_section(imm_42),
]
fn test_arithmetic_i8(): void
{
    LEA %1, string8("test_arithmetic_i8(%d): %i \n")
    MOV %message, %1
    FREE %1
    ADD %message, %message, u64(8)
    MOV %a, i8(5)
    NEG %b, i8(12)
    ADD %x, %a, %b
    CAST %2, %x
    CALL 'printf', , %message, u32(1), %2
    FREE %2
    SUB %x, %b, %a
    CAST %3, %x
    CALL 'printf', , %message, u32(2), %3
    FREE %3
    MUL %x, %a, %b
    CAST %4, %x
    CALL 'printf', , %message, u32(3), %4
    FREE %4
    DIV %x, %b, %a
    FREE %a
    FREE %b
    CAST %5, %x
    FREE %x
    CALL 'printf', , %message, u32(4), %5
    FREE %5
    FREE %message
    RET @void
}

[stack: 0]
[
  %1	: register(RBX),
  %message	: register(RSI),
  %a	: register(BX),
  %b	: register(DI),
  %x	: register(R12W),
  %2	: register(R13D),
  %3	: register(R13D),
  %4	: register(R13D),
  %5	: register(EBX),
  string8("test_arithmetic_i16(%d): %i \n")	: data_section(imm_43),
  u64(8)	: data_section(imm_44),
  i16(5)	: data_section(imm_45),
  i16(12)	: data_section(imm_46),
  u32(1)	: data_section(imm_47),
  u32(2)	: data_section(imm_48),
  u32(3)	: data_section(imm_49),
  u32(4)	: data_section(imm_50),
]
fn test_arithmetic_i16(): void
{
    LEA %1, string8("test_arithmetic_i16(%d): %i \n")
    MOV %message, %1
    FREE %1
    ADD %message, %message, u64(8)
    MOV %a, i16(5)
    NEG %b, i16(12)
    ADD %x, %a, %b
    CAST %2, %x
    CALL 'printf', , %message, u32(1), %2
    FREE %2
    SUB %x, %b, %a
    CAST %3, %x
    CALL 'printf', , %message, u32(2), %3
    FREE %3
    MUL %x, %a, %b
    CAST %4, %x
    CALL 'printf', , %message, u32(3), %4
    FREE %4
    DIV %x, %b, %a
    FREE %a
    FREE %b
    CAST %5, %x
    FREE %x
    CALL 'printf', , %message, u32(4), %5
    FREE %5
    FREE %message
    RET @void
}

[stack: 0]
[
  %1	: register(RBX),
  %message	: register(RSI),
  %a	: register(EBX),
  %b	: register(EDI),
  %x	: register(R12D),
  string8("test_arithmetic_i32(%d): %i \n")	: data_section(imm_51),
  u64(8)	: data_section(imm_52),
  i32(5)	: data_section(imm_53),
  i32(12)	: data_section(imm_54),
  u32(1)	: data_section(imm_55),
  u32(2)	: data_section(imm_56),
  u32(3)	: data_section(imm_57),
  u32(4)	: data_section(imm_58),
]
fn test_arithmetic_i32(): void
{
    LEA %1, string8("test_arithmetic_i32(%d): %i \n")
    MOV %message, %1
    FREE %1
    ADD %message, %message, u64(8)
    MOV %a, i32(5)
    NEG %b, i32(12)
    ADD %x, %a, %b
    CALL 'printf', , %message, u32(1), %x
    SUB %x, %b, %a
    CALL 'printf', , %message, u32(2), %x
    MUL %x, %a, %b
    CALL 'printf', , %message, u32(3), %x
    DIV %x, %b, %a
    FREE %a
    FREE %b
    CALL 'printf', , %message, u32(4), %x
    FREE %x
    FREE %message
    RET @void
}

[stack: 0]
[
  %1	: register(RBX),
  %message	: register(RSI),
  %a	: register(RBX),
  %b	: register(RDI),
  %x	: register(R12),
  string8("test_arithmetic_i64(%d): %lli \n")	: data_section(imm_59),
  u64(8)	: data_section(imm_60),
  i64(5)	: data_section(imm_61),
  i64(12)	: data_section(imm_62),
  u32(1)	: data_section(imm_63),
  u32(2)	: data_section(imm_64),
  u32(3)	: data_section(imm_65),
  u32(4)	: data_section(imm_66),
]
fn test_arithmetic_i64(): void
{
    LEA %1, string8("test_arithmetic_i64(%d): %lli \n")
    MOV %message, %1
    FREE %1
    ADD %message, %message, u64(8)
    MOV %a, i64(5)
    NEG %b, i64(12)
    ADD %x, %a, %b
    CALL 'printf', , %message, u32(1), %x
    SUB %x, %b, %a
    CALL 'printf', , %message, u32(2), %x
    MUL %x, %a, %b
    CALL 'printf', , %message, u32(3), %x
    DIV %x, %b, %a
    FREE %a
    FREE %b
    CALL 'printf', , %message, u32(4), %x
    FREE %x
    FREE %message
    RET @void
}

[stack: 0]
[
  %s	: register(RBX),
  %1	: register(RSI),
  %c	: register(DIL),
  [%1]	: heap_register(RSI+0),
  %3	: register(RSI),
  %2	: register(R12),
  %l	: register(RSI),
  [%s]	: heap_register(RBX+0),
  %5	: register(RBX),
  %4	: register(RDI),
  %6	: register(RBX),
  %7	: register(RDI),
  %8	: register(R12),
  [%6]	: heap_register(RBX+0),
  [%7]	: heap_register(RDI+0),
  %9	: register(R13),
  %s2	: register(R14),
  %10	: register(R13),
  [%10]	: heap_register(R13+0),
  %11	: register(R12),
  [%11]	: heap_register(R12+0),
  [%s2]	: heap_register(R14+0),
  %13	: register(RBX),
  %12	: register(RDI),
  string8("Hello World!")	: data_section(imm_67),
  i64(6)	: data_section(imm_68),
  u64(1)	: data_section(imm_69),
  u64(8)	: data_section(imm_70),
  string8("test_string(1): %c\n")	: data_section(imm_71),
  string8("test_string(2): %lld\n")	: data_section(imm_72),
  string8("abc")	: data_section(imm_73),
  string8("defg")	: data_section(imm_74),
  u64(9)	: data_section(imm_75),
  char8('\0')	: data_section(imm_76),
  u8(0)	: data_section(imm_77),
]
fn test_string(): void
{
    LEA %s, string8("Hello World!")
    MOV %1, i64(6)
    MUL %1, %1, u64(1)
    ADD %1, %1, %s
    ADD %1, %1, u64(8)
    MOV %c, [%1]
    FREE %1
    LEA %3, string8("test_string(1): %c\n")
    MOV %2, %3
    FREE %3
    ADD %2, %2, u64(8)
    CALL 'printf', , %2, %c
    FREE %c
    FREE %2
    MOV %l, [%s]
    FREE %s
    LEA %5, string8("test_string(2): %lld\n")
    MOV %4, %5
    FREE %5
    ADD %4, %4, u64(8)
    CALL 'printf', , %4, %l
    FREE %4
    LEA %6, string8("abc")
    LEA %7, string8("defg")
    MOV %8, [%6]
    ADD %8, %8, [%7]
    MOV %9, %8
    ADD %8, %8, u64(9)
    SALOC %s2, %9
    FREE %9
    MOV %10, %s2
    MOV [%10], %8
    FREE %8
    ADD %10, %10, u64(8)
    MOV %11, %6
    FREE %6
    ADD %11, %11, u64(8)
    LABL 'label_1'
    JMPE [%11], char8('\0'), 'label_2'
    MOV [%10], [%11]
    ADD %10, %10, u64(1)
    ADD %11, %11, u64(1)
    JMP 'label_1'
    LABL 'label_2'
    MOV %11, %7
    FREE %7
    ADD %11, %11, u64(8)
    LABL 'label_3'
    JMPE [%11], char8('\0'), 'label_4'
    MOV [%10], [%11]
    ADD %10, %10, u64(1)
    ADD %11, %11, u64(1)
    FREE %11
    JMP 'label_3'
    LABL 'label_4'
    MOV [%10], u8(0)
    FREE %10
    MOV %l, [%s2]
    LEA %13, string8("test_string(2): %lld\n")
    MOV %12, %13
    FREE %13
    ADD %12, %12, u64(8)
    CALL 'printf', , %12, %l
    FREE %l
    FREE %12
    DEL %s2
    FREE %s2
    RET @void
}

[stack: 0]
[
]
fn test_arrays(): void
{
    RET @void
}

[stack: 0]
[
]
fn test_casting(): void
{
    RET @void
}

ext fn['ExitProcess', 'Kernel32.dll'] erc_exit_process(u32): void

ext fn['GetProcessHeap', 'Kernel32.dll'] erc_get_process_heap(): void*

ext fn['HeapAlloc', 'Kernel32.dll'] erc_heap_alloc(void*, u32, u64): void*

ext fn['HeapFree', 'Kernel32.dll'] erc_heap_free(void*, u32, void*): bool

ext fn['printf', 'MSVCRT.DLL'] printf(char8*): i32



format PE64 NX console 6.0
entry start
include 'fasmw\include\win64a.inc'

section '.data' data readable writeable

imm_1 db 23,0,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,10,0; "######################\n"
imm_29 dq 5
imm_30 dq 12
imm_35 db 28,0,0,0,0,0,0,0,116,101,115,116,95,97,114,105,116,104,109,101,116,105,99,95,105,56,40,37,100,41,58,32,37,105,32,10,0; "test_arithmetic_i8(%d): %i \n"
imm_36 dq 8
erc_process_heap dq 0
imm_43 db 29,0,0,0,0,0,0,0,116,101,115,116,95,97,114,105,116,104,109,101,116,105,99,95,105,49,54,40,37,100,41,58,32,37,105,32,10,0; "test_arithmetic_i16(%d): %i \n"
imm_44 dq 8
imm_51 db 29,0,0,0,0,0,0,0,116,101,115,116,95,97,114,105,116,104,109,101,116,105,99,95,105,51,50,40,37,100,41,58,32,37,105,32,10,0; "test_arithmetic_i32(%d): %i \n"
imm_52 dq 8
imm_59 db 31,0,0,0,0,0,0,0,116,101,115,116,95,97,114,105,116,104,109,101,116,105,99,95,105,54,52,40,37,100,41,58,32,37,108,108,105,32,10,0; "test_arithmetic_i64(%d): %lli \n"
imm_28 dq 8
imm_60 dq 8
imm_62 dq 12
imm_67 db 12,0,0,0,0,0,0,0,72,101,108,108,111,32,87,111,114,108,100,33,0; "Hello World!"
imm_68 dq 6
imm_69 dq 1
imm_70 dq 8
imm_71 db 19,0,0,0,0,0,0,0,116,101,115,116,95,115,116,114,105,110,103,40,49,41,58,32,37,99,10,0; "test_string(1): %c\n"
imm_72 db 21,0,0,0,0,0,0,0,116,101,115,116,95,115,116,114,105,110,103,40,50,41,58,32,37,108,108,100,10,0; "test_string(2): %lld\n"
imm_73 db 3,0,0,0,0,0,0,0,97,98,99,0; "abc"
imm_74 db 4,0,0,0,0,0,0,0,100,101,102,103,0; "defg"
imm_75 dq 9
imm_61 dq 5
imm_27 db 31,0,0,0,0,0,0,0,116,101,115,116,95,97,114,105,116,104,109,101,116,105,99,95,117,54,52,40,37,100,41,58,32,37,108,108,100,32,10,0; "test_arithmetic_u64(%d): %lld \n"
erc_u32_zero dd 0
imm_2 dq 8
imm_3 db 28,0,0,0,0,0,0,0,116,101,115,116,95,97,114,105,116,104,109,101,116,105,99,95,117,56,40,37,100,41,58,32,37,100,32,10,0; "test_arithmetic_u8(%d): %d \n"
imm_4 dq 8
imm_20 dq 8
imm_12 dq 8
imm_11 db 29,0,0,0,0,0,0,0,116,101,115,116,95,97,114,105,116,104,109,101,116,105,99,95,117,49,54,40,37,100,41,58,32,37,100,32,10,0; "test_arithmetic_u16(%d): %d \n"
imm_19 db 29,0,0,0,0,0,0,0,116,101,115,116,95,97,114,105,116,104,109,101,116,105,99,95,117,51,50,40,37,100,41,58,32,37,100,32,10,0; "test_arithmetic_u32(%d): %d \n"
imm_25 dd 3
imm_26 dd 4
imm_54 dd 12
imm_55 dd 1
imm_56 dd 2
imm_57 dd 3
imm_58 dd 4
imm_64 dd 2
imm_15 dd 1
imm_65 dd 3
imm_66 dd 4
imm_10 dd 4
imm_9 dd 3
imm_8 dd 2
imm_7 dd 1
imm_63 dd 1
imm_16 dd 2
imm_53 dd 5
imm_49 dd 3
imm_24 dd 2
imm_23 dd 1
imm_22 dd 12
imm_31 dd 1
imm_32 dd 2
imm_33 dd 3
imm_34 dd 4
imm_21 dd 5
imm_50 dd 4
imm_39 dd 1
imm_40 dd 2
imm_42 dd 4
imm_18 dd 4
imm_17 dd 3
imm_47 dd 1
imm_48 dd 2
imm_41 dd 3
imm_13 dw 5
imm_14 dw 12
imm_45 dw 5
imm_46 dw 12
imm_38 db 12
imm_6 db 12
imm_5 db 5
imm_76 db 0 ; '\0'
imm_77 db 0
imm_37 db 5

section '.text' code readable executable
start:
call [GetProcessHeap]
mov [erc_process_heap], rax
push rbp
mov rbp, rsp
call fn_main
pop rbp
xor ecx,ecx
call [ExitProcess]

fn_main:
MOV RBP, RSP
;CALL 'test_arithmetic_u8', 
SUB RSP, 0x20
CALL fn_test_arithmetic_u8
ADD RSP, 0x20
;CALL 'print_separator', 
SUB RSP, 0x20
CALL fn_print_separator
ADD RSP, 0x20
;CALL 'test_arithmetic_u16', 
SUB RSP, 0x20
CALL fn_test_arithmetic_u16
ADD RSP, 0x20
;CALL 'print_separator', 
SUB RSP, 0x20
CALL fn_print_separator
ADD RSP, 0x20
;CALL 'test_arithmetic_u32', 
SUB RSP, 0x20
CALL fn_test_arithmetic_u32
ADD RSP, 0x20
;CALL 'print_separator', 
SUB RSP, 0x20
CALL fn_print_separator
ADD RSP, 0x20
;CALL 'test_arithmetic_u64', 
SUB RSP, 0x20
CALL fn_test_arithmetic_u64
ADD RSP, 0x20
;CALL 'print_separator', 
SUB RSP, 0x20
CALL fn_print_separator
ADD RSP, 0x20
;CALL 'test_arithmetic_i8', 
SUB RSP, 0x20
CALL fn_test_arithmetic_i8
ADD RSP, 0x20
;CALL 'print_separator', 
SUB RSP, 0x20
CALL fn_print_separator
ADD RSP, 0x20
;CALL 'test_arithmetic_i16', 
SUB RSP, 0x20
CALL fn_test_arithmetic_i16
ADD RSP, 0x20
;CALL 'print_separator', 
SUB RSP, 0x20
CALL fn_print_separator
ADD RSP, 0x20
;CALL 'test_arithmetic_i32', 
SUB RSP, 0x20
CALL fn_test_arithmetic_i32
ADD RSP, 0x20
;CALL 'print_separator', 
SUB RSP, 0x20
CALL fn_print_separator
ADD RSP, 0x20
;CALL 'test_arithmetic_i64', 
SUB RSP, 0x20
CALL fn_test_arithmetic_i64
ADD RSP, 0x20
;CALL 'print_separator', 
SUB RSP, 0x20
CALL fn_print_separator
ADD RSP, 0x20
;CALL 'test_string', 
SUB RSP, 0x20
CALL fn_test_string
ADD RSP, 0x20
;RET @void
RET

fn_print_separator:
MOV RBP, RSP
;LEA %2, string8("######################\n")
LEA RBX, [imm_1]
;MOV %1, %2
MOV RSI, RBX
;ADD %1, %1, u64(8)
ADD RSI, [imm_2]
;CALL 'printf', , %1
PUSH RSI
PUSH RBX
MOV RCX, RSI
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RBX
POP RSI
;RET @void
RET

fn_test_arithmetic_u8:
MOV RBP, RSP
;LEA %1, string8("test_arithmetic_u8(%d): %d \n")
LEA RBX, [imm_3]
;MOV %message, %1
MOV RSI, RBX
;ADD %message, %message, u64(8)
ADD RSI, [imm_4]
;MOV %a, u8(5)
MOV BL, [imm_5]
;MOV %b, u8(12)
MOV DIL, [imm_6]
;ADD %x, %a, %b
MOV R12B, BL
ADD R12B, DIL
;CAST %2, %x
MOV R13B, R12B
;CALL 'printf', , %message, u32(1), %2
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_7]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;SUB %x, %b, %a
MOV R12B, DIL
SUB R12B, BL
;CAST %3, %x
MOV R13B, R12B
;CALL 'printf', , %message, u32(2), %3
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_8]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;MUL %x, %a, %b
MOV AL, BL
MUL DIL
MOV R12B, AL
;CAST %4, %x
MOV R13B, R12B
;CALL 'printf', , %message, u32(3), %4
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_9]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;DIV %x, %b, %a
XOR AX, AX
MOV AL, DIL
DIV BL
MOV R12B, AL
;CAST %5, %x
MOV BL, R12B
;CALL 'printf', , %message, u32(4), %5
PUSH RSI
PUSH R13
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_10]
MOV R8D, EBX
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP R13
POP RSI
;RET @void
RET

fn_test_arithmetic_u16:
MOV RBP, RSP
;LEA %1, string8("test_arithmetic_u16(%d): %d \n")
LEA RBX, [imm_11]
;MOV %message, %1
MOV RSI, RBX
;ADD %message, %message, u64(8)
ADD RSI, [imm_12]
;MOV %a, u16(5)
MOV BX, [imm_13]
;MOV %b, u16(12)
MOV DI, [imm_14]
;ADD %x, %a, %b
MOV R12W, BX
ADD R12W, DI
;CAST %2, %x
MOV R13W, R12W
;CALL 'printf', , %message, u32(1), %2
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_15]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;SUB %x, %b, %a
MOV R12W, DI
SUB R12W, BX
;CAST %3, %x
MOV R13W, R12W
;CALL 'printf', , %message, u32(2), %3
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_16]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;MUL %x, %a, %b
PUSH RDX
MOV AX, BX
MUL DI
MOV R12W, AX
POP RDX
;CAST %4, %x
MOV R13W, R12W
;CALL 'printf', , %message, u32(3), %4
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_17]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;DIV %x, %b, %a
PUSH RDX
XOR RDX, RDX
MOV AX, DI
DIV BX
MOV R12W, AX
POP RDX
;CAST %5, %x
MOV BX, R12W
;CALL 'printf', , %message, u32(4), %5
PUSH RSI
PUSH R13
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_18]
MOV R8D, EBX
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP R13
POP RSI
;RET @void
RET

fn_test_arithmetic_u32:
MOV RBP, RSP
;LEA %1, string8("test_arithmetic_u32(%d): %d \n")
LEA RBX, [imm_19]
;MOV %message, %1
MOV RSI, RBX
;ADD %message, %message, u64(8)
ADD RSI, [imm_20]
;MOV %a, u32(5)
MOV EBX, [imm_21]
;MOV %b, u32(12)
MOV EDI, [imm_22]
;ADD %x, %a, %b
MOV R12D, EBX
ADD R12D, EDI
;CALL 'printf', , %message, u32(1), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_23]
MOV R8D, R12D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;SUB %x, %b, %a
MOV R12D, EDI
SUB R12D, EBX
;CALL 'printf', , %message, u32(2), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_24]
MOV R8D, R12D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;MUL %x, %a, %b
PUSH RDX
MOV EAX, EBX
MUL EDI
MOV R12D, EAX
POP RDX
;CALL 'printf', , %message, u32(3), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_25]
MOV R8D, R12D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;DIV %x, %b, %a
PUSH RDX
XOR RDX, RDX
MOV EAX, EDI
DIV EBX
MOV R12D, EAX
POP RDX
;CALL 'printf', , %message, u32(4), %x
PUSH RSI
PUSH R12
PUSH RBX
PUSH RDI
MOV RCX, RSI
MOV EDX, [imm_26]
MOV R8D, R12D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RDI
POP RBX
POP R12
POP RSI
;RET @void
RET

fn_test_arithmetic_u64:
MOV RBP, RSP
;LEA %1, string8("test_arithmetic_u64(%d): %lld \n")
LEA RBX, [imm_27]
;MOV %message, %1
MOV RSI, RBX
;ADD %message, %message, u64(8)
ADD RSI, [imm_28]
;MOV %a, u64(5)
MOV RBX, [imm_29]
;MOV %b, u64(12)
MOV RDI, [imm_30]
;ADD %x, %a, %b
MOV R12, RBX
ADD R12, RDI
;CALL 'printf', , %message, u32(1), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_31]
MOV R8, R12
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;SUB %x, %b, %a
MOV R12, RDI
SUB R12, RBX
;CALL 'printf', , %message, u32(2), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_32]
MOV R8, R12
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;MUL %x, %a, %b
PUSH RDX
MOV RAX, RBX
MUL RDI
MOV R12, RAX
POP RDX
;CALL 'printf', , %message, u32(3), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_33]
MOV R8, R12
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;DIV %x, %b, %a
PUSH RDX
XOR RDX, RDX
MOV RAX, RDI
DIV RBX
MOV R12, RAX
POP RDX
;CALL 'printf', , %message, u32(4), %x
PUSH RSI
PUSH R12
PUSH RBX
PUSH RDI
MOV RCX, RSI
MOV EDX, [imm_34]
MOV R8, R12
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RDI
POP RBX
POP R12
POP RSI
;RET @void
RET

fn_test_arithmetic_i8:
MOV RBP, RSP
;LEA %1, string8("test_arithmetic_i8(%d): %i \n")
LEA RBX, [imm_35]
;MOV %message, %1
MOV RSI, RBX
;ADD %message, %message, u64(8)
ADD RSI, [imm_36]
;MOV %a, i8(5)
MOV BL, [imm_37]
;NEG %b, i8(12)
XOR DIL, DIL
SUB DIL, [imm_38]
;ADD %x, %a, %b
MOV R12B, BL
ADD R12B, DIL
;CAST %2, %x
MOVSX R13D, R12B
;CALL 'printf', , %message, u32(1), %2
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_39]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;SUB %x, %b, %a
MOV R12B, DIL
SUB R12B, BL
;CAST %3, %x
MOVSX R13D, R12B
;CALL 'printf', , %message, u32(2), %3
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_40]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;MUL %x, %a, %b
MOV AL, BL
IMUL DIL
MOV R12B, AL
;CAST %4, %x
MOVSX R13D, R12B
;CALL 'printf', , %message, u32(3), %4
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_41]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;DIV %x, %b, %a
MOV AL, DIL
CBW
IDIV BL
MOV R12B, AL
;CAST %5, %x
MOVSX EBX, R12B
;CALL 'printf', , %message, u32(4), %5
PUSH RSI
PUSH R13
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_42]
MOV R8D, EBX
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP R13
POP RSI
;RET @void
RET

fn_test_arithmetic_i16:
MOV RBP, RSP
;LEA %1, string8("test_arithmetic_i16(%d): %i \n")
LEA RBX, [imm_43]
;MOV %message, %1
MOV RSI, RBX
;ADD %message, %message, u64(8)
ADD RSI, [imm_44]
;MOV %a, i16(5)
MOV BX, [imm_45]
;NEG %b, i16(12)
XOR DI, DI
SUB DI, [imm_46]
;ADD %x, %a, %b
MOV R12W, BX
ADD R12W, DI
;CAST %2, %x
MOVSX R13D, R12W
;CALL 'printf', , %message, u32(1), %2
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_47]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;SUB %x, %b, %a
MOV R12W, DI
SUB R12W, BX
;CAST %3, %x
MOVSX R13D, R12W
;CALL 'printf', , %message, u32(2), %3
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_48]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;MUL %x, %a, %b
PUSH RDX
MOV AX, BX
IMUL DI
MOV R12W, AX
POP RDX
;CAST %4, %x
MOVSX R13D, R12W
;CALL 'printf', , %message, u32(3), %4
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
PUSH R13
MOV RCX, RSI
MOV EDX, [imm_49]
MOV R8D, R13D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R13
POP R12
POP RDI
POP RBX
POP RSI
;DIV %x, %b, %a
PUSH RDX
MOV AX, DI
CWD
IDIV BX
MOV R12W, AX
POP RDX
;CAST %5, %x
MOVSX EBX, R12W
;CALL 'printf', , %message, u32(4), %5
PUSH RSI
PUSH R13
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_50]
MOV R8D, EBX
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP R13
POP RSI
;RET @void
RET

fn_test_arithmetic_i32:
MOV RBP, RSP
;LEA %1, string8("test_arithmetic_i32(%d): %i \n")
LEA RBX, [imm_51]
;MOV %message, %1
MOV RSI, RBX
;ADD %message, %message, u64(8)
ADD RSI, [imm_52]
;MOV %a, i32(5)
MOV EBX, [imm_53]
;NEG %b, i32(12)
XOR EDI, EDI
SUB EDI, [imm_54]
;ADD %x, %a, %b
MOV R12D, EBX
ADD R12D, EDI
;CALL 'printf', , %message, u32(1), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_55]
MOV R8D, R12D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;SUB %x, %b, %a
MOV R12D, EDI
SUB R12D, EBX
;CALL 'printf', , %message, u32(2), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_56]
MOV R8D, R12D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;MUL %x, %a, %b
PUSH RDX
MOV EAX, EBX
IMUL EDI
MOV R12D, EAX
POP RDX
;CALL 'printf', , %message, u32(3), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_57]
MOV R8D, R12D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;DIV %x, %b, %a
PUSH RDX
MOV EAX, EDI
CDQ
IDIV EBX
MOV R12D, EAX
POP RDX
;CALL 'printf', , %message, u32(4), %x
PUSH RSI
PUSH R12
PUSH RBX
PUSH RDI
MOV RCX, RSI
MOV EDX, [imm_58]
MOV R8D, R12D
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RDI
POP RBX
POP R12
POP RSI
;RET @void
RET

fn_test_arithmetic_i64:
MOV RBP, RSP
;LEA %1, string8("test_arithmetic_i64(%d): %lli \n")
LEA RBX, [imm_59]
;MOV %message, %1
MOV RSI, RBX
;ADD %message, %message, u64(8)
ADD RSI, [imm_60]
;MOV %a, i64(5)
MOV RBX, [imm_61]
;NEG %b, i64(12)
XOR RDI, RDI
SUB RDI, [imm_62]
;ADD %x, %a, %b
MOV R12, RBX
ADD R12, RDI
;CALL 'printf', , %message, u32(1), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_63]
MOV R8, R12
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;SUB %x, %b, %a
MOV R12, RDI
SUB R12, RBX
;CALL 'printf', , %message, u32(2), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_64]
MOV R8, R12
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;MUL %x, %a, %b
PUSH RDX
MOV RAX, RBX
IMUL RDI
MOV R12, RAX
POP RDX
;CALL 'printf', , %message, u32(3), %x
PUSH RSI
PUSH RBX
PUSH RDI
PUSH R12
MOV RCX, RSI
MOV EDX, [imm_65]
MOV R8, R12
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP R12
POP RDI
POP RBX
POP RSI
;DIV %x, %b, %a
PUSH RDX
MOV RAX, RDI
CQO
IDIV RBX
MOV R12, RAX
POP RDX
;CALL 'printf', , %message, u32(4), %x
PUSH RSI
PUSH R12
PUSH RBX
PUSH RDI
MOV RCX, RSI
MOV EDX, [imm_66]
MOV R8, R12
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RDI
POP RBX
POP R12
POP RSI
;RET @void
RET

fn_test_string:
MOV RBP, RSP
;LEA %s, string8("Hello World!")
LEA RBX, [imm_67]
;MOV %1, i64(6)
MOV RSI, [imm_68]
;MUL %1, %1, u64(1)
MOV RAX, RSI
MUL [imm_69]
MOV RSI, RAX
;ADD %1, %1, %s
ADD RSI, RBX
;ADD %1, %1, u64(8)
ADD RSI, [imm_70]
;MOV %c, [%1]
MOV DIL, [RSI]
;LEA %3, string8("test_string(1): %c\n")
LEA RSI, [imm_71]
;MOV %2, %3
MOV R12, RSI
;ADD %2, %2, u64(8)
ADD R12, [imm_70]
;CALL 'printf', , %2, %c
PUSH RBX
PUSH RDI
PUSH R12
PUSH RSI
MOV RCX, R12
MOV DL, DIL
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RSI
POP R12
POP RDI
POP RBX
;MOV %l, [%s]
MOV RSI, [RBX]
;LEA %5, string8("test_string(2): %lld\n")
LEA RBX, [imm_72]
;MOV %4, %5
MOV RDI, RBX
;ADD %4, %4, u64(8)
ADD RDI, [imm_70]
;CALL 'printf', , %4, %l
PUSH RSI
PUSH RDI
PUSH R12
PUSH RBX
MOV RCX, RDI
MOV RDX, RSI
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RBX
POP R12
POP RDI
POP RSI
;LEA %6, string8("abc")
LEA RBX, [imm_73]
;LEA %7, string8("defg")
LEA RDI, [imm_74]
;MOV %8, [%6]
MOV R12, [RBX]
;ADD %8, %8, [%7]
ADD R12, [RDI]
;MOV %9, %8
MOV R13, R12
;ADD %8, %8, u64(9)
ADD R12, [imm_75]
;SALOC %s2, %9
ADD RSP, R13
LEA R14, [RSP]
;MOV %10, %s2
MOV R13, R14
;MOV [%10], %8
MOV [R13], R12
;ADD %10, %10, u64(8)
ADD R13, [imm_70]
;MOV %11, %6
MOV R12, RBX
;ADD %11, %11, u64(8)
ADD R12, [imm_70]
;LABL 'label_1'
label_1:
;JMPE [%11], char8('\0'), 'label_2'
MOV AL, [R12]
CMP AL, [imm_76]
JE label_2
;MOV [%10], [%11]
MOV AL, [R12]
MOV [R13], AL
;ADD %10, %10, u64(1)
ADD R13, [imm_69]
;ADD %11, %11, u64(1)
ADD R12, [imm_69]
;JMP 'label_1'
JMP label_1
;LABL 'label_2'
label_2:
;MOV %11, %7
MOV R12, RDI
;ADD %11, %11, u64(8)
ADD R12, [imm_70]
;LABL 'label_3'
label_3:
;JMPE [%11], char8('\0'), 'label_4'
MOV AL, [R12]
CMP AL, [imm_76]
JE label_4
;MOV [%10], [%11]
MOV AL, [R12]
MOV [R13], AL
;ADD %10, %10, u64(1)
ADD R13, [imm_69]
;ADD %11, %11, u64(1)
ADD R12, [imm_69]
;JMP 'label_3'
JMP label_3
;LABL 'label_4'
label_4:
;MOV [%10], u8(0)
MOV AL, [imm_77]
MOV [R13], AL
;MOV %l, [%s2]
MOV RSI, [R14]
;LEA %13, string8("test_string(2): %lld\n")
LEA RBX, [imm_72]
;MOV %12, %13
MOV RDI, RBX
;ADD %12, %12, u64(8)
ADD RDI, [imm_70]
;CALL 'printf', , %12, %l
PUSH RSI
PUSH R14
PUSH RDI
PUSH R12
PUSH R13
PUSH RBX
MOV RCX, RDI
MOV RDX, RSI
SUB RSP, 0x20
CALL [printf]
ADD RSP, 0x20
POP RBX
POP R13
POP R12
POP RDI
POP R14
POP RSI
;DEL %s2
PUSH R14
PUSH R12
PUSH R13
PUSH RBX
PUSH RSI
PUSH RDI
MOV RCX, [erc_process_heap]
MOV EDX, [erc_u32_zero]
MOV R8, R14
SUB RSP, 0x20
CALL [HeapFree]
ADD RSP, 0x20
POP RDI
POP RSI
POP RBX
POP R13
POP R12
POP R14
;RET @void
RET

fn_test_arrays:
MOV RBP, RSP
;RET @void
RET

fn_test_casting:
MOV RBP, RSP
;RET @void
RET

section '.idata' import data readable writeable

library Kernel32,'Kernel32.dll',\
MSVCRT,'MSVCRT.DLL'
import Kernel32,\
  ExitProcess,'ExitProcess',\
  GetProcessHeap,'GetProcessHeap',\
  HeapAlloc,'HeapAlloc',\
  HeapFree,'HeapFree'
import MSVCRT,\
  printf,'printf'
